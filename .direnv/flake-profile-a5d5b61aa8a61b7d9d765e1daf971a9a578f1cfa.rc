unset shellHook
PATH=${PATH:-}
nix_saved_PATH="$PATH"
XDG_DATA_DIRS=${XDG_DATA_DIRS:-}
nix_saved_XDG_DATA_DIRS="$XDG_DATA_DIRS"
AR='ar'
export AR
AS='as'
export AS
BASH='/nix/store/xg75pc4yyfd5n2fimhb98ps910q5lm5n-bash-5.2p37/bin/bash'
CC='gcc'
export CC
CONFIG_SHELL='/nix/store/xg75pc4yyfd5n2fimhb98ps910q5lm5n-bash-5.2p37/bin/bash'
export CONFIG_SHELL
CXX='g++'
export CXX
HOSTTYPE='x86_64'
HOST_PATH='/nix/store/jfnx02k29ca8cyk32fqv3q6842h0v93j-ncurses-6.5/bin:/nix/store/dm7dvvrn7q142knbn7na6v5dmj33d2x2-cabal-install-3.14.1.1/bin:/nix/store/vyriahblzy5iyrmqfb597f0y48np27pq-haskell-language-server-2.10.0.0/bin:/nix/store/40l6nxk38gc820w8vwapd2h7nwbccd25-aeson-pretty-0.8.10/bin:/nix/store/g8a9gaghk0ay9gfbryc1fa1idqqw9nk4-apply-refact-0.14.0.0/bin:/nix/store/fsrc6pp5s4p552bpsn8732x1863n28s6-ghc-9.6.4/bin:/nix/store/zrqwpfvr7a7k0gr5afxk3w90yd3mfzk4-cabal-add-0.1/bin:/nix/store/vxwl4hwmcri75sr6b3ywa8f56zg2rc9p-floskell-0.11.1/bin:/nix/store/137wb8rhxxa2bia9fqwgkbg3vza7478y-fourmolu-0.15.0.0/bin:/nix/store/gd14nwvw8mszymncagymidvk4b8pnlqz-ghcide-2.10.0.0/bin:/nix/store/hdradc3gl5lxjzzxpbn7rw0h7vfwcc4a-constraints-extras-0.4.0.2/bin:/nix/store/q9yjx772ybvl56vd8ls2wpwbn1v1vbc7-hie-bios-0.14.0/bin:/nix/store/8prxsrixjvm2a36xk2y976185vg5ipjr-hiedb-0.6.0.1/bin:/nix/store/21kk0il61l6nba4p8baj9jp9q2gixmw2-lsp-types-2.3.0.1/bin:/nix/store/2z8akk1wqywbr2y55i6c9siqvm2wf83k-implicit-hie-0.1.4.0/bin:/nix/store/2pdbry6bcpfld098zk9j8a8clvc2j05c-hlint-3.8/bin:/nix/store/baahr3imswa2s79zrxlhf042n1sqnzrm-cpphs-1.20.9.1/bin:/nix/store/04rlbf5w1crdr98miy33zvr12wbqk5yj-hscolour-1.25/bin:/nix/store/wsx1hqwkdm541dv2gn0r98wbwjwqslgn-ormolu-0.7.4.0-bin/bin:/nix/store/zyy075lfccw7lsi1ri435lpx30qv4s23-retrie-1.2.3/bin:/nix/store/fy2nx3cp0g8qsa7wlpdcygyd7a1n6d8v-shake-0.19.8/bin:/nix/store/bzf46mz0gxvq5fxyx1a2zbxd22z6lzs0-stan-0.2.0.0/bin:/nix/store/azpp22l3mp6q1f24yhxjl5x529qrcibg-extensions-0.1.0.1/bin:/nix/store/5jvgjdy51y4w3gdv20rkd8awj4hx4vcs-pretty-simple-4.1.3.0/bin:/nix/store/da01ijn7nwxxd1jicjlgdhp7w1sc63fl-stylish-haskell-0.14.6.0/bin:/nix/store/aasikddzz36lnakq01svm0rv4mds2q29-fsnotify-0.4.2.0/bin:/nix/store/l09vzdnjgfg4nbajsvjw48j3pff8fa6s-ghcid-0.8.9-bin/bin:/nix/store/4zwwbki3rd30l7sb4bcanj4lhpjy07xi-nixpkgs-fmt-1.3.0/bin:/nix/store/cg09nslw3w6afyynjw484b86d47ic1cb-coreutils-9.7/bin:/nix/store/frspb25x6v43fwv6b0wna1fm5nsqcp0b-findutils-4.10.0/bin:/nix/store/8cs5vjkbwf2vicgms4km5k1kgbznhwip-diffutils-3.12/bin:/nix/store/1h8gf327cgid0jgjygrj31amp63mn7a7-gnused-4.9/bin:/nix/store/2wni3gbcf6fqwlfb2h9sv7jvqlpf1ylq-gnugrep-3.11/bin:/nix/store/f8x04xqd2cs274k0hgfzsrms6sby2fgx-gawk-5.3.2/bin:/nix/store/5jmcn57x2j9mkdr3j947cbja2hpxmhfn-gnutar-1.35/bin:/nix/store/04z4rhjadrnd0w3ib2sl42pa3xjgpf7p-gzip-1.14/bin:/nix/store/sysih19x8xx8l473d3qnr760hy758lkq-bzip2-1.0.8-bin/bin:/nix/store/agn71jakv0a9669k3zx5g9aqm2sl9z77-gnumake-4.4.1/bin:/nix/store/xg75pc4yyfd5n2fimhb98ps910q5lm5n-bash-5.2p37/bin:/nix/store/qd20g193gch8bj4h0h44wr97mw0bhkmf-patch-2.7.6/bin:/nix/store/fi495i6cz40rq1axig930jzyw7ln0zhm-xz-5.8.1-bin/bin:/nix/store/hb9v0qx9vk0420z5grlnv2y5wcf6dp6i-file-5.46/bin'
export HOST_PATH
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LANG='en_US.UTF-8'
export LANG
LD='ld'
export LD
LINENO='76'
LOCALE_ARCHIVE='/nix/store/4blrfy4r48iv9838amm77qqizc8shd9p-glibc-locales-2.40-66/lib/locale/locale-archive'
export LOCALE_ARCHIVE
MACHTYPE='x86_64-pc-linux-gnu'
NIX_BINTOOLS='/nix/store/2zx2a8g7bkl2lkrql10hnjjpzz4wq09c-binutils-wrapper-2.44'
export NIX_BINTOOLS
NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_BUILD_CORES='12'
export NIX_BUILD_CORES
NIX_CC='/nix/store/dc6bahp3f5af2rxz3pal9m3kp4vx4rpy-gcc-wrapper-14.2.1.20250322'
export NIX_CC
NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu='1'
export NIX_CC_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu
NIX_CFLAGS_COMPILE=' -frandom-seed=4gpl7ilxvh'
export NIX_CFLAGS_COMPILE
NIX_ENFORCE_NO_NATIVE='1'
export NIX_ENFORCE_NO_NATIVE
NIX_GHC='/nix/store/fsrc6pp5s4p552bpsn8732x1863n28s6-ghc-9.6.4/bin/ghc'
export NIX_GHC
NIX_GHCPKG='/nix/store/fsrc6pp5s4p552bpsn8732x1863n28s6-ghc-9.6.4/bin/ghc-pkg'
export NIX_GHCPKG
NIX_GHC_DOCDIR='/nix/store/fsrc6pp5s4p552bpsn8732x1863n28s6-ghc-9.6.4/share/doc/ghc/html'
export NIX_GHC_DOCDIR
NIX_GHC_LIBDIR='/nix/store/fsrc6pp5s4p552bpsn8732x1863n28s6-ghc-9.6.4/lib/ghc-9.6.4/lib'
export NIX_GHC_LIBDIR
NIX_HARDENING_ENABLE='bindnow format fortify fortify3 pic relro stackclashprotection stackprotector strictoverflow zerocallusedregs'
export NIX_HARDENING_ENABLE
NIX_LDFLAGS='-rpath /home/viking/projects/ccc/outputs/out/lib  -L/nix/store/jfnx02k29ca8cyk32fqv3q6842h0v93j-ncurses-6.5/lib -L/nix/store/paqdsvmj4fwhc2w6rr884c3kymxl69k0-libffi-3.4.8/lib -L/nix/store/hx43gnc9mwk61dzq7vd90ql8nlkifjjv-elfutils-0.192/lib -L/nix/store/lgll5hzf733bjhhmd0j49gz0vy1hv7aa-gmp-with-cxx-6.3.0/lib -L/nix/store/jfnx02k29ca8cyk32fqv3q6842h0v93j-ncurses-6.5/lib -L/nix/store/paqdsvmj4fwhc2w6rr884c3kymxl69k0-libffi-3.4.8/lib -L/nix/store/hx43gnc9mwk61dzq7vd90ql8nlkifjjv-elfutils-0.192/lib -L/nix/store/lgll5hzf733bjhhmd0j49gz0vy1hv7aa-gmp-with-cxx-6.3.0/lib'
export NIX_LDFLAGS
NIX_NO_SELF_RPATH='1'
NIX_STORE='/nix/store'
export NIX_STORE
NM='nm'
export NM
OBJCOPY='objcopy'
export OBJCOPY
OBJDUMP='objdump'
export OBJDUMP
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='linux-gnu'
PATH='/nix/store/fsrc6pp5s4p552bpsn8732x1863n28s6-ghc-9.6.4/bin:/nix/store/5yl5rscbbqh9b3r9ixi6cnzfaydq9n9r-patchelf-0.15.0/bin:/nix/store/dc6bahp3f5af2rxz3pal9m3kp4vx4rpy-gcc-wrapper-14.2.1.20250322/bin:/nix/store/24sdvjs6rfqs69d21gdn437mb3vc0svh-gcc-14.2.1.20250322/bin:/nix/store/nswsqm9wwhx0l48c8db0swc87171r2rk-glibc-2.40-66-bin/bin:/nix/store/cg09nslw3w6afyynjw484b86d47ic1cb-coreutils-9.7/bin:/nix/store/2zx2a8g7bkl2lkrql10hnjjpzz4wq09c-binutils-wrapper-2.44/bin:/nix/store/wcv8n2k53w8sbffpf716gxj6mjb5jf26-binutils-2.44/bin:/nix/store/jfnx02k29ca8cyk32fqv3q6842h0v93j-ncurses-6.5/bin:/nix/store/dm7dvvrn7q142knbn7na6v5dmj33d2x2-cabal-install-3.14.1.1/bin:/nix/store/vyriahblzy5iyrmqfb597f0y48np27pq-haskell-language-server-2.10.0.0/bin:/nix/store/40l6nxk38gc820w8vwapd2h7nwbccd25-aeson-pretty-0.8.10/bin:/nix/store/g8a9gaghk0ay9gfbryc1fa1idqqw9nk4-apply-refact-0.14.0.0/bin:/nix/store/zrqwpfvr7a7k0gr5afxk3w90yd3mfzk4-cabal-add-0.1/bin:/nix/store/vxwl4hwmcri75sr6b3ywa8f56zg2rc9p-floskell-0.11.1/bin:/nix/store/137wb8rhxxa2bia9fqwgkbg3vza7478y-fourmolu-0.15.0.0/bin:/nix/store/gd14nwvw8mszymncagymidvk4b8pnlqz-ghcide-2.10.0.0/bin:/nix/store/hdradc3gl5lxjzzxpbn7rw0h7vfwcc4a-constraints-extras-0.4.0.2/bin:/nix/store/q9yjx772ybvl56vd8ls2wpwbn1v1vbc7-hie-bios-0.14.0/bin:/nix/store/8prxsrixjvm2a36xk2y976185vg5ipjr-hiedb-0.6.0.1/bin:/nix/store/21kk0il61l6nba4p8baj9jp9q2gixmw2-lsp-types-2.3.0.1/bin:/nix/store/2z8akk1wqywbr2y55i6c9siqvm2wf83k-implicit-hie-0.1.4.0/bin:/nix/store/2pdbry6bcpfld098zk9j8a8clvc2j05c-hlint-3.8/bin:/nix/store/baahr3imswa2s79zrxlhf042n1sqnzrm-cpphs-1.20.9.1/bin:/nix/store/04rlbf5w1crdr98miy33zvr12wbqk5yj-hscolour-1.25/bin:/nix/store/wsx1hqwkdm541dv2gn0r98wbwjwqslgn-ormolu-0.7.4.0-bin/bin:/nix/store/zyy075lfccw7lsi1ri435lpx30qv4s23-retrie-1.2.3/bin:/nix/store/fy2nx3cp0g8qsa7wlpdcygyd7a1n6d8v-shake-0.19.8/bin:/nix/store/bzf46mz0gxvq5fxyx1a2zbxd22z6lzs0-stan-0.2.0.0/bin:/nix/store/azpp22l3mp6q1f24yhxjl5x529qrcibg-extensions-0.1.0.1/bin:/nix/store/5jvgjdy51y4w3gdv20rkd8awj4hx4vcs-pretty-simple-4.1.3.0/bin:/nix/store/da01ijn7nwxxd1jicjlgdhp7w1sc63fl-stylish-haskell-0.14.6.0/bin:/nix/store/aasikddzz36lnakq01svm0rv4mds2q29-fsnotify-0.4.2.0/bin:/nix/store/l09vzdnjgfg4nbajsvjw48j3pff8fa6s-ghcid-0.8.9-bin/bin:/nix/store/4zwwbki3rd30l7sb4bcanj4lhpjy07xi-nixpkgs-fmt-1.3.0/bin:/nix/store/cg09nslw3w6afyynjw484b86d47ic1cb-coreutils-9.7/bin:/nix/store/frspb25x6v43fwv6b0wna1fm5nsqcp0b-findutils-4.10.0/bin:/nix/store/8cs5vjkbwf2vicgms4km5k1kgbznhwip-diffutils-3.12/bin:/nix/store/1h8gf327cgid0jgjygrj31amp63mn7a7-gnused-4.9/bin:/nix/store/2wni3gbcf6fqwlfb2h9sv7jvqlpf1ylq-gnugrep-3.11/bin:/nix/store/f8x04xqd2cs274k0hgfzsrms6sby2fgx-gawk-5.3.2/bin:/nix/store/5jmcn57x2j9mkdr3j947cbja2hpxmhfn-gnutar-1.35/bin:/nix/store/04z4rhjadrnd0w3ib2sl42pa3xjgpf7p-gzip-1.14/bin:/nix/store/sysih19x8xx8l473d3qnr760hy758lkq-bzip2-1.0.8-bin/bin:/nix/store/agn71jakv0a9669k3zx5g9aqm2sl9z77-gnumake-4.4.1/bin:/nix/store/xg75pc4yyfd5n2fimhb98ps910q5lm5n-bash-5.2p37/bin:/nix/store/qd20g193gch8bj4h0h44wr97mw0bhkmf-patch-2.7.6/bin:/nix/store/fi495i6cz40rq1axig930jzyw7ln0zhm-xz-5.8.1-bin/bin:/nix/store/hb9v0qx9vk0420z5grlnv2y5wcf6dp6i-file-5.46/bin'
export PATH
PS4='+ '
RANLIB='ranlib'
export RANLIB
READELF='readelf'
export READELF
SHELL='/nix/store/xg75pc4yyfd5n2fimhb98ps910q5lm5n-bash-5.2p37/bin/bash'
export SHELL
SIZE='size'
export SIZE
SOURCE_DATE_EPOCH='315532800'
export SOURCE_DATE_EPOCH
STRINGS='strings'
export STRINGS
STRIP='strip'
export STRIP
XDG_DATA_DIRS='/nix/store/fsrc6pp5s4p552bpsn8732x1863n28s6-ghc-9.6.4/share:/nix/store/5yl5rscbbqh9b3r9ixi6cnzfaydq9n9r-patchelf-0.15.0/share'
export XDG_DATA_DIRS
__structuredAttrs=''
export __structuredAttrs
_substituteStream_has_warned_replace_deprecation='false'
buildCommandPath='/build/.attr-0l2nkwhif96f51f4amnlf414lhl4rv9vh8iffyp431v6s28gsr90'
export buildCommandPath
buildInputs='/nix/store/dm7dvvrn7q142knbn7na6v5dmj33d2x2-cabal-install-3.14.1.1 /nix/store/vyriahblzy5iyrmqfb597f0y48np27pq-haskell-language-server-2.10.0.0 /nix/store/2pdbry6bcpfld098zk9j8a8clvc2j05c-hlint-3.8 /nix/store/j0f9i8pdqs2vca9j5si7hzs5s7ms8n4m-ormolu-0.7.4.0 /nix/store/9v9c12qmfsyiz79b92s5dcsh95fwiw63-ghcid-0.8.9 /nix/store/4zwwbki3rd30l7sb4bcanj4lhpjy07xi-nixpkgs-fmt-1.3.0'
export buildInputs
builder='/nix/store/xg75pc4yyfd5n2fimhb98ps910q5lm5n-bash-5.2p37/bin/bash'
export builder
cmakeFlags=''
export cmakeFlags
configureFlags=''
export configureFlags
defaultBuildInputs=''
defaultNativeBuildInputs='/nix/store/5yl5rscbbqh9b3r9ixi6cnzfaydq9n9r-patchelf-0.15.0 /nix/store/d41c6ccm4yaq2czglxs10lzkynrmd399-update-autotools-gnu-config-scripts-hook /nix/store/jjhw2phnaip4kg0qjas3x3fsaifi8y0w-no-broken-symlinks.sh /nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh /nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh /nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh /nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh /nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh /nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh /nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh /nix/store/cmzya9irvxzlkh7lfy6i82gbp0saxqj3-multiple-outputs.sh /nix/store/hxv896faph0rqxjq2ycxpcrbnngc95sz-patch-shebangs.sh /nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh /nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh /nix/store/z7k98578dfzi6l3hsvbivzm7hfqlk0zc-set-source-date-epoch-to-latest.sh /nix/store/pilsssjjdxvdphlg2h19p0bfx5q0jzkn-strip.sh /nix/store/dc6bahp3f5af2rxz3pal9m3kp4vx4rpy-gcc-wrapper-14.2.1.20250322'
depsBuildBuild=''
export depsBuildBuild
depsBuildBuildPropagated=''
export depsBuildBuildPropagated
depsBuildTarget=''
export depsBuildTarget
depsBuildTargetPropagated=''
export depsBuildTargetPropagated
depsHostHost=''
export depsHostHost
depsHostHostPropagated=''
export depsHostHostPropagated
depsTargetTarget=''
export depsTargetTarget
depsTargetTargetPropagated=''
export depsTargetTargetPropagated
doCheck=''
export doCheck
doInstallCheck=''
export doInstallCheck
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
enableParallelBuilding='1'
export enableParallelBuilding
enableParallelChecking='1'
export enableParallelChecking
enableParallelInstalling='1'
export enableParallelInstalling
declare -a envBuildBuildHooks=()
declare -a envBuildHostHooks=()
declare -a envBuildTargetHooks=()
declare -a envHostHostHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envHostTargetHooks=('ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envTargetTargetHooks=()
declare -a fixupOutputHooks=('if [ -z "${dontPatchELF-}" ]; then patchELF "$prefix"; fi' 'if [[ -z "${noAuditTmpdir-}" && -e "$prefix" ]]; then auditTmpdir "$prefix"; fi' 'if [ -z "${dontGzipMan-}" ]; then compressManPages "$prefix"; fi' '_moveLib64' '_moveSbin' '_moveSystemdUserUnits' 'patchShebangsAuto' '_pruneLibtoolFiles' '_doStrip' )
guess='12'
initialPath='/nix/store/cg09nslw3w6afyynjw484b86d47ic1cb-coreutils-9.7 /nix/store/frspb25x6v43fwv6b0wna1fm5nsqcp0b-findutils-4.10.0 /nix/store/8cs5vjkbwf2vicgms4km5k1kgbznhwip-diffutils-3.12 /nix/store/1h8gf327cgid0jgjygrj31amp63mn7a7-gnused-4.9 /nix/store/2wni3gbcf6fqwlfb2h9sv7jvqlpf1ylq-gnugrep-3.11 /nix/store/f8x04xqd2cs274k0hgfzsrms6sby2fgx-gawk-5.3.2 /nix/store/5jmcn57x2j9mkdr3j947cbja2hpxmhfn-gnutar-1.35 /nix/store/04z4rhjadrnd0w3ib2sl42pa3xjgpf7p-gzip-1.14 /nix/store/sysih19x8xx8l473d3qnr760hy758lkq-bzip2-1.0.8-bin /nix/store/agn71jakv0a9669k3zx5g9aqm2sl9z77-gnumake-4.4.1 /nix/store/xg75pc4yyfd5n2fimhb98ps910q5lm5n-bash-5.2p37 /nix/store/qd20g193gch8bj4h0h44wr97mw0bhkmf-patch-2.7.6 /nix/store/fi495i6cz40rq1axig930jzyw7ln0zhm-xz-5.8.1-bin /nix/store/hb9v0qx9vk0420z5grlnv2y5wcf6dp6i-file-5.46'
mesonFlags=''
export mesonFlags
name='ghc-shell-for-ccc-0.1.0.0-0-env'
export name
nativeBuildInputs='/nix/store/fsrc6pp5s4p552bpsn8732x1863n28s6-ghc-9.6.4'
export nativeBuildInputs
out='/home/viking/projects/ccc/outputs/out'
export out
outputBin='out'
outputDev='out'
outputDevdoc='REMOVE'
outputDevman='out'
outputDoc='out'
outputInclude='out'
outputInfo='out'
outputLib='out'
outputMan='out'
outputs='out'
export outputs
passAsFile='buildCommand'
export passAsFile
patches=''
export patches
pkg='/nix/store/dc6bahp3f5af2rxz3pal9m3kp4vx4rpy-gcc-wrapper-14.2.1.20250322'
declare -a pkgsBuildBuild=()
declare -a pkgsBuildHost=('/nix/store/fsrc6pp5s4p552bpsn8732x1863n28s6-ghc-9.6.4' '/nix/store/5yl5rscbbqh9b3r9ixi6cnzfaydq9n9r-patchelf-0.15.0' '/nix/store/d41c6ccm4yaq2czglxs10lzkynrmd399-update-autotools-gnu-config-scripts-hook' '/nix/store/jjhw2phnaip4kg0qjas3x3fsaifi8y0w-no-broken-symlinks.sh' '/nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh' '/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh' '/nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh' '/nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh' '/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh' '/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh' '/nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh' '/nix/store/cmzya9irvxzlkh7lfy6i82gbp0saxqj3-multiple-outputs.sh' '/nix/store/hxv896faph0rqxjq2ycxpcrbnngc95sz-patch-shebangs.sh' '/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh' '/nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh' '/nix/store/z7k98578dfzi6l3hsvbivzm7hfqlk0zc-set-source-date-epoch-to-latest.sh' '/nix/store/pilsssjjdxvdphlg2h19p0bfx5q0jzkn-strip.sh' '/nix/store/dc6bahp3f5af2rxz3pal9m3kp4vx4rpy-gcc-wrapper-14.2.1.20250322' '/nix/store/2zx2a8g7bkl2lkrql10hnjjpzz4wq09c-binutils-wrapper-2.44' )
declare -a pkgsBuildTarget=()
declare -a pkgsHostHost=('/nix/store/jfnx02k29ca8cyk32fqv3q6842h0v93j-ncurses-6.5' '/nix/store/paqdsvmj4fwhc2w6rr884c3kymxl69k0-libffi-3.4.8' '/nix/store/hx43gnc9mwk61dzq7vd90ql8nlkifjjv-elfutils-0.192' '/nix/store/lgll5hzf733bjhhmd0j49gz0vy1hv7aa-gmp-with-cxx-6.3.0' )
declare -a pkgsHostTarget=('/nix/store/dm7dvvrn7q142knbn7na6v5dmj33d2x2-cabal-install-3.14.1.1' '/nix/store/p4jmzgpdccy79iwyjhjqcfqh1c1s7gpq-async-2.2.5' '/nix/store/04ni38vbbpkvkjscghp1hrpcfc86y3bx-hashable-1.4.7.0' '/nix/store/qzdiyf7m8smba8p7zm458nybnd485kz8-os-string-2.0.7' '/nix/store/1m333ak4ln2m8xar779ywpk2kl8xcz7c-base16-bytestring-1.0.2.0' '/nix/store/3f372xgx4jwd61dwan3mfa54m41flfkh-Cabal-3.14.1.1' '/nix/store/gfr4gnhys1mya313cpnnpdsq39g2y2jl-Cabal-syntax-3.14.1.0' '/nix/store/7pk99cvxw891jk4xp7lj2f2dvplw0wax-cabal-install-solver-3.14.1.0' '/nix/store/dqm8wgz5y3pk3865pgs3gfwd6ppl7si9-edit-distance-0.2.2.1' '/nix/store/zyzwjwfyw83j7dhar4yd9cvkwzkjxwxb-random-1.2.1.3' '/nix/store/0v6azlpqs1kiv8ziq1d9a27l38zd0554-splitmix-0.1.1' '/nix/store/cs89cwp3qjli3iwc1n4bxmasmp33nkdm-network-uri-2.6.4.2' '/nix/store/bc923mxmirf8wwkhj47ihmy1kcb2aq2n-th-compat-0.1.6' '/nix/store/2ac5fvpcwj5r568g9z8ycpn9zw33vyjs-cryptohash-sha256-0.11.102.1' '/nix/store/kl82r16x1g1zq615w1q0z26cbcncid8s-echo-0.1.4' '/nix/store/1793g6yr7hx4xxifp22rwa0yf0zlrr48-hackage-security-0.6.2.6' '/nix/store/y7mzl7k379z9dbkfl735znllpx4czcvf-base64-bytestring-1.2.1.0' '/nix/store/wvjz8k7b7i7bswmilv7cjgjx2ywdz1i1-ed25519-0.0.5.0' '/nix/store/2y4msgy1fdvrvsz529nmiz24p3ziw1g3-lukko-0.1.2' '/nix/store/nwq8ywqp3kikjj54qhj2ysqar6p7j5kj-network-3.2.7.0' '/nix/store/lmhz8hkyjjbzvrrfiyzmg8a5hklmnj7l-tar-0.6.3.0' '/nix/store/dgf1cbfviiwf2x4z0wq41d09ikhbmh8p-zlib-0.7.1.0' '/nix/store/hahp5d2mfgpfpvj5b02sf21sj9x4m3ms-HTTP-4000.4.1' '/nix/store/mp7j5yjxkqpgmyllh1zj6684avrfi4sq-open-browser-0.2.1.1' '/nix/store/jmm76rfmndx33qis3fjsnwn00jcba946-regex-base-0.94.0.3' '/nix/store/mhmf8y9780lnjf89r66kd3krwwidiirn-regex-posix-0.96.0.2' '/nix/store/49fyh2p10kspq7n3c3n5qdzv7aaasa33-resolv-0.2.0.2' '/nix/store/zk1l6ipdyn6nb88q5ssdj50jd8087py0-safe-exceptions-0.1.7.4' '/nix/store/cjkqa7d8j25y1qr804wnqxvxkhajyk9j-semaphore-compat-1.0.0' '/nix/store/vyriahblzy5iyrmqfb597f0y48np27pq-haskell-language-server-2.10.0.0' '/nix/store/9h9f02py77v64vvwzn9sah1jbhfrb67b-aeson-2.2.3.0' '/nix/store/v2vlrkzgq729kzs5dqxj1qx5mz6j5q7k-character-ps-0.1' '/nix/store/66f0lj3nsb689w0b4my5lx4y0l1i0bza-data-fix-0.3.4' '/nix/store/ffk1k5zf7d29c6ia2y73aay4al2q7ri0-dlist-1.0' '/nix/store/1pysv01bqfa54jd8abq7y2vkn8vjsjlp-generically-0.1.1' '/nix/store/n7r1sd0adx847kng159f1ay0p3m08c9r-indexed-traversable-0.1.4' '/nix/store/5dvn5chwrgiz2ynbl0kwyrn5hl7fn3b8-integer-conversion-0.1.1' '/nix/store/6l9ggxps9l74vqrbli3qxv2dsw7ksmb9-primitive-0.9.0.0' '/nix/store/1vfaw5g1z0x4pnn7xabpfi6f0nic7qnv-integer-logarithms-1.0.4' '/nix/store/xqxdrmxyand3mvbg56pj89r5h03nkjlz-OneTuple-0.4.2' '/nix/store/s9cf9kh9707nhpryaqvwh5hf2hx2br8p-QuickCheck-2.14.3' '/nix/store/2s8d23k119275x146cwjk6la2kw6nj2d-scientific-0.3.8.0' '/nix/store/96krgj0ysknqz1pn7m7b6gprwj1zqf5z-semialign-1.3.1' '/nix/store/sznib6w6y2ihr4bzyd33cb898x4s7pg1-indexed-traversable-instances-0.1.2' '/nix/store/krbk6zfjkjgvqxfkjg37lija02zkiig4-tagged-0.8.8' '/nix/store/l4has7sk85h2p45ybhhdcip7jkv4mzws-unordered-containers-0.2.20' '/nix/store/sfd5y2qr1w704pbpmbcnry7frjhzjdjv-vector-0.13.2.0' '/nix/store/y7a3w3aj974slfkdfv1cfrgk7mr15m0h-tasty-1.5.3' '/nix/store/4bqvfwhnwaxgxiwhp05rk3s4aiz61lip-ansi-terminal-1.1.2' '/nix/store/n8msgji5qn6dxsyckdzfhbanh3ci0d4k-ansi-terminal-types-1.1' '/nix/store/gcry9f97xw8pca41dbh1sn3rmighhzwn-colour-2.3.6' '/nix/store/aw559jrql1df1gnplw6p7v73lbl9k2nc-optparse-applicative-0.18.1.0' '/nix/store/qfwl3m18q597rlmly8zm9nwpbanvqwsa-prettyprinter-1.7.1' '/nix/store/q2rglg2qmkrkfaygyqy2d2fv1q3pdlnf-prettyprinter-ansi-terminal-1.1.3' '/nix/store/zjfz91dmmsxjhhqc10ym5qfc9pf1w496-transformers-compat-0.7.2' '/nix/store/9ak1h8flpksrbakwab0gw8qraqb4pvzk-vector-stream-0.1.0.1' '/nix/store/bbsjxahxksd69aib89a740sih8mfa7ii-semigroupoids-6.0.1' '/nix/store/ldjl652fcwm67mqncf8yns2p6i9r18j6-base-orphans-0.9.3' '/nix/store/2pf2lb5hq86abbf6glbikxd6kv68pgmc-bifunctors-5.6.2' '/nix/store/18i82psqpsg4smkakk0yyvv97iic5vjj-assoc-1.1.1' '/nix/store/37kqy764x1m91ysfqc2j2jk575al4x1g-comonad-5.0.9' '/nix/store/n3nl37ck6wyqj20p4ny726q93c0d5bd1-distributive-0.6.2.1' '/nix/store/bvii25z2fjm0rgf8mw5kq61gx1iifpa3-th-abstraction-0.7.1.0' '/nix/store/8pz303n0a6chh9463dy16q6s78l0ppsr-contravariant-1.5.5' '/nix/store/cwkrssqdg0dc3rqz1vv8vd2aycf7f69g-StateVar-1.2.2' '/nix/store/ys5vlckrdr7wdrsl3mgziz8c2x75cmv9-these-1.2.1' '/nix/store/k056cmh375k1rsjlcwmyzjziija45sri-strict-0.5.1' '/nix/store/f6jkxl2sjmcgyjbhzd1d7gnjnz6p44ll-text-iso8601-0.1.1' '/nix/store/xafj07g0fxl1rn5dfn8zlqqf6if41y6g-time-compat-1.9.7' '/nix/store/l3dz2icml6nbym2nj6p8jsadnjdr80yv-text-short-0.1.6' '/nix/store/lyghghac03gz6566zfhw0ikfcr2r3vq1-uuid-types-1.0.6' '/nix/store/iya4hlqsnzwc6l00wszn1zaw0wijf0hk-witherable-0.5' '/nix/store/40l6nxk38gc820w8vwapd2h7nwbccd25-aeson-pretty-0.8.10' '/nix/store/szlimq8mk4aw8jv6dmz4rn5dvyz5m58w-base-compat-0.13.1' '/nix/store/rmxf7cn3r1zv4f2azkawxg9wliimk85v-attoparsec-0.14.4' '/nix/store/xzqbp20gakfjzvd6rb1san4gslpvgrvr-attoparsec-aeson-2.2.2.0' '/nix/store/wln2ksic02lsjw85s8af27sf3phj6zgm-cmdargs-0.10.22' '/nix/store/g8a9gaghk0ay9gfbryc1fa1idqqw9nk4-apply-refact-0.14.0.0' '/nix/store/sg6h5qd20iq1f91bahg4yzx83r7kjxxb-extra-1.7.16' '/nix/store/1apmihmnyfli3dl84nwh9z1zw26hm4h3-clock-0.8.4' '/nix/store/xqiddlxzwz37hnwh6yrzrmdpzs127l32-filemanip-0.3.6.3' '/nix/store/pwyp8mnfaaih2nk3mqiy7nyvp2ik1pya-unix-compat-0.7.4' '/nix/store/fsrc6pp5s4p552bpsn8732x1863n28s6-ghc-9.6.4' '/nix/store/6ifa4mcml446wpvbi8cz7933rdjyyrfk-ghc-exactprint-1.7.1.0' '/nix/store/hak7qk1ynspjfx0d0xvm7mrb6cidb23x-data-default-0.7.1.3' '/nix/store/wfscpskdf2qqpd25fp5mnv1hp2rhpzyk-data-default-class-0.1.2.2' '/nix/store/prbkbs3zmzqppydl88y0mbw1yc4dpxf8-data-default-instances-containers-0.1.0.3' '/nix/store/5i1pb7k7x13kpwajdyd5shv2r1xzpfqs-data-default-instances-dlist-0.0.1.2' '/nix/store/4vl79n0aq5qhwc56l9d58qcmp2b5z7n5-data-default-instances-old-locale-0.0.1.2' '/nix/store/42h6d2ggxxg5rcfqhyyq0cim7d0w90cs-old-locale-1.0.0.7' '/nix/store/m240gp5ldpgg21jn67q2p48bibxg9wv6-fail-4.9.0.0' '/nix/store/ib0517gvqgsj2wcq5wfxb2frzw7qnagj-free-5.2' '/nix/store/n70srvnfsadlc533zdpnkc8qwgf22dmi-profunctors-5.6.2' '/nix/store/vfcj74qgcvk52yzwz4p0zj8m2m2abyvb-transformers-base-0.4.6' '/nix/store/kr2vk7a0pv6qbjm6k8fxkmvs3y963jcr-ordered-containers-0.2.4' '/nix/store/aqyi5pkglf5pmgvc69s19h3v1q2i0dx7-syb-0.7.2.4' '/nix/store/0rlmspjcv4ax3mwpgpypp279vypxl8y1-refact-0.3.0.2' '/nix/store/0ypgln9f8zxxxs2mdsf2l1rvl1dvvqdj-uniplate-1.6.13' '/nix/store/467mqjwss7hlkm9yr99s4bm88cw5wi9m-ghc-paths-0.1.0.12' '/nix/store/zrqwpfvr7a7k0gr5afxk3w90yd3mfzk4-cabal-add-0.1' '/nix/store/xgnb6m8s0j13rfbm6yqyskpd2ckzqz1l-cabal-install-parsers-0.6.1.1' '/nix/store/dgm0vkn5b8f4s1fsc4qan339vps9ghal-binary-instances-1.0.6' '/nix/store/fx3fcg5g05vgr3sspj6hj40a37w2v5y1-binary-orphans-1.0.5' '/nix/store/h4pbf5jnhnbacvlp65ra3xmpv2s4wb06-case-insensitive-1.2.1.0' '/nix/store/c4b5a52iq34aksdv64nmszjfs3zhvlpv-vector-binary-instances-0.2.5.2' '/nix/store/bl0v36s3ck49wmvd8sywb89wza0fb2k8-Diff-0.5' '/nix/store/vxwl4hwmcri75sr6b3ywa8f56zg2rc9p-floskell-0.11.1' '/nix/store/w41jhwpm22xp3jwx5j8c885pkjs02bkj-haskell-src-exts-1.23.1' '/nix/store/1vmc4g1q8xpsar6wwvdc2qi485qv7xa9-monad-dijkstra-0.1.1.5' '/nix/store/d2ffprkq6zwgnqii6g44fbsgsdqir7ng-psqueues-0.2.8.1' '/nix/store/3qqalsspflkbs7ksa47c7hv0bg1l7qwv-ansi-wl-pprint-1.0.2' '/nix/store/v4mi3ircr7g9gw2q73pvmxakl8awx3s1-prettyprinter-compat-ansi-wl-pprint-1.0.2' '/nix/store/ahwr91b3xglyxy358siv5nwbz90xycdk-foldl-1.4.18' '/nix/store/137wb8rhxxa2bia9fqwgkbg3vza7478y-fourmolu-0.15.0.0' '/nix/store/xjcqb0xkk4s8xgpbfc2w45ckv8saf818-file-embed-0.0.16.0' '/nix/store/fl7dgx73qkw9sg3zc1z9m0vqxbdf7a1j-ghc-lib-parser-9.8.5.20250214' '/nix/store/kjcq0kz5w1qldf6rkl89n75czhz98r0h-megaparsec-9.6.1' '/nix/store/axfi2sqjvnn3fydx1ibyb23bb9x3rkr9-parser-combinators-1.3.0' '/nix/store/f7v2hf9q5lfc33lp2ydrhxqifkbg7gnp-MemoTrie-0.6.11' '/nix/store/fas10i0a0qn3kkigrw1q3y5bj5r2hy5v-newtype-generics-0.6.2' '/nix/store/l020zacdpsq02dv5ni33dd5s06mqkpwb-yaml-0.11.11.2' '/nix/store/ah73ani69fc257ap4fpg45w7r6562qad-conduit-1.3.6.1' '/nix/store/yqgjv8m9ab1nisl149arb0djazyhlvp8-mono-traversable-1.0.21.0' '/nix/store/is4p3vbs9jq9z4czvb99qdl5js09ylkq-split-0.2.5' '/nix/store/p4cdmvixnrz3dchwwrffvi1vvwcrkddj-vector-algorithms-0.9.1.0' '/nix/store/1klrwla7vg2ywvb5ynq69wrlcg2nz548-bitvec-1.1.5.0' '/nix/store/rw48znppbl266yd69jz0h21q804ligin-resourcet-1.3.0' '/nix/store/x44fv6spd0lkvd4d5clw1cz2nhr41xs7-unliftio-core-0.2.1.0' '/nix/store/5c79mwkkcdlwi202xw7dd38zhm9hnk5i-libyaml-0.1.4' '/nix/store/113diailxk8pni0bq0f373iwc8cr2y3x-libyaml-clib-0.2.5' '/nix/store/n55z5p38x32z4g8g1binqg4r0jh1hnr5-th-env-0.1.1' '/nix/store/a2r0j532abrk29lda67ji65kqq3vxk4i-fuzzy-0.1.1.0' '/nix/store/4ailzjyl19j116n9mp9jm34r6kvw5lnp-monoid-subclasses-1.2.6' '/nix/store/m8xylz7nlvsg9lyzmj2pb5ndlg51p652-commutative-semigroups-0.2.0.2' '/nix/store/kbawnh2x9ym7m4kdsnw1xbi5v779ka2k-primes-0.2.1.0' '/nix/store/xcdsna4afhjvf343md7gbfr6plsbi0c9-ghc-lib-parser-ex-9.8.0.2' '/nix/store/gd14nwvw8mszymncagymidvk4b8pnlqz-ghcide-2.10.0.0' '/nix/store/2j9j0n610ca4hvrnv41f2zk864s00md6-co-log-core-0.3.2.5' '/nix/store/hw4659zca17mmi9k06g9jqbd4vmmzsvd-cryptohash-sha1-0.11.101.0' '/nix/store/8lw77v8p30nwm1vp0pcql6a9drhz5gmf-dependent-map-0.4.0.0' '/nix/store/hdradc3gl5lxjzzxpbn7rw0h7vfwcc4a-constraints-extras-0.4.0.2' '/nix/store/9mqx8rfvvazi30y9d7wwarp9jx204r8i-constraints-0.14.2' '/nix/store/k2psn6nspfcbrm01k3ypjijmwz0iyr0d-boring-0.2.2' '/nix/store/9k550s7lcgls7pgyc3pmj9f7m2byvanf-dependent-sum-0.7.2.0' '/nix/store/qswpyh2yh5nlnhxncjvrhysws71r227r-some-1.0.6' '/nix/store/8ar17vxqmsz1akrp88yv1vyz98kxamlc-enummapset-0.7.3.0' '/nix/store/8nw227dm8w2sz5vg4h3mc64ad6gdz485-fingertree-0.1.5.0' '/nix/store/05a1qgfxalpnv79civv7kf44lxmjgkwh-focus-1.0.3.2' '/nix/store/hrmrivv3kj9gwm91n3ph62faxqs6vby6-ghc-trace-events-0.1.2.9' '/nix/store/varzin00byqrjlfkjvkj0bwyjcrlri6f-Glob-0.10.2' '/nix/store/pgr05g7vdycdzra22fmw41q1wr75kriz-haddock-library-1.11.0' '/nix/store/q9yjx772ybvl56vd8ls2wpwbn1v1vbc7-hie-bios-0.14.0' '/nix/store/zpwkydhb6dil0khhg05dw8r73kxkyw3q-conduit-extra-1.3.7' '/nix/store/f0cmpsb5kg69bs4xz27g8mzl80dxk3z3-streaming-commons-0.2.3.0' '/nix/store/65n6jjy5nc52rrcqsgj600kc01bh7f1w-typed-process-0.2.12.0' '/nix/store/smdz8wb6h106d54732146h87b7glm9hw-temporary-1.3' '/nix/store/bgxfqcl2n1vqw9fwjs9ackkh4sl51xlh-hie-compat-0.3.1.2' '/nix/store/8prxsrixjvm2a36xk2y976185vg5ipjr-hiedb-0.6.0.1' '/nix/store/sm188rxfkj3sypszh3mfddinik9ld98g-algebraic-graphs-0.7' '/nix/store/6l4xsyqgvdbykqfv7aq8qis8d7a9jara-lucid-2.11.20250303' '/nix/store/3rq7cm2vjnlcn4vqxyrs9pycvk4aky71-blaze-builder-0.4.2.3' '/nix/store/isd0qkxdsr0fz9bn3wdwnnyms2dvz1br-mmorph-1.2.0' '/nix/store/r8an0ni1v43mmlbcha35sb184g0dzf0p-sqlite-simple-0.4.19.0' '/nix/store/ip68hp0kmb36ysxbm1i0ydjafl69wsbh-blaze-textual-0.2.3.1' '/nix/store/kd5vj33yf2jlkq1kdmg19hdz9af9sl2h-direct-sqlite-2.3.29' '/nix/store/xamg2afc3i6y8fain3k0y6lxnfgb2sbq-Only-0.1' '/nix/store/vi7jqybiq1mjh1mf2ya3yfby6n4f8ldr-terminal-size-0.3.4' '/nix/store/sr71xinffxlv4fi5am9nxrnppqjk166a-hls-graph-2.10.0.0' '/nix/store/silzkq4skqc21yf5f0z5q876i6mx8k3s-js-dgtable-0.5.2' '/nix/store/ffmvvrrhsq6dph3rqriipg1vg3h7m7gf-js-flot-0.8.3' '/nix/store/3p47glz7smy3gwcjw0dd3np45bdw3kkb-js-jquery-3.3.1' '/nix/store/8764xnkbhv86db5lx1fc35ic7mplqgk4-list-t-1.0.5.7' '/nix/store/dq1m85f2g4r0681n3l8hm90b7d3icm51-logict-0.8.2.0' '/nix/store/r1ha4dqj1d6jw08bl8lblbm1pw8y4sbi-monad-control-1.0.3.1' '/nix/store/z00p7mllrc9i9ld125jlqgnwn9m0zzmz-stm-containers-1.2.1.1' '/nix/store/42sgyn7r9pzn2ij5jjlnf2h33xk7dbbl-deferred-folds-0.9.18.7' '/nix/store/75hi2v7vglvs7cj5s7kh2d3hx7d7rsrj-stm-hamt-1.2.1.1' '/nix/store/0pzq4rz58ygkizkzwya19mrm6b93zing-primitive-extras-0.10.2.2' '/nix/store/jls969h6z4vkpx8ixgmgc6116x7d5jvw-cereal-0.5.8.3' '/nix/store/qhg9cwwjhw9hbxqbg722swvwwf0idyw0-primitive-unlifted-2.1.0.0' '/nix/store/5m20vg9ks0k6xj41y9sy95njn2xrqf0h-unliftio-0.2.25.1' '/nix/store/p827fdbagf9b53an56c76q8v3jfgrvn1-hls-plugin-api-2.10.0.0' '/nix/store/p61jhgcm802ynf2hbj16s1gxiq6v3a1v-hw-fingertree-0.1.2.1' '/nix/store/r2j3rzwwgjjk5qxvrcmkjwdydjhd209v-hw-prim-0.6.3.2' '/nix/store/qfnkrqsdnm53zxic755a8yv3rql8gs51-mmap-0.5.9' '/nix/store/2m7z1anrlfkm4zhvkl5agfkq0vdmlrk9-lens-5.3.4' '/nix/store/8pvlyibg6xvw95s4my3f5kf1v67zk329-call-stack-0.4.0' '/nix/store/11y49azbgpj2zglk2wvs31cgn0jpy81r-kan-extensions-5.2.6' '/nix/store/5z5hvkk5s78a15aypqjwlz9icr4qbvs6-adjunctions-4.4.3' '/nix/store/dljm7n68zqllqywsy2rkhqbkn08i1bzk-semigroups-0.20' '/nix/store/1nmjp6pdyjlxc4wrkbi3sk2ggi2553ps-void-0.7.3' '/nix/store/xxjdkfa02spxspf0cgijkcs5p38cv1fk-invariant-0.6.4' '/nix/store/rgb1sqz6fslavi5srirxlkkdvr8fz694-parallel-3.2.2.0' '/nix/store/byx1xq1ji8nw4izd3615pgnmw1y4zvid-reflection-2.1.9' '/nix/store/mn88gkc71ydmbwrhl24503pm5lgml2mr-lens-aeson-1.2.3' '/nix/store/010f2frkvl3zchdqfcv8i1fvwygbag4p-lsp-2.7.0.1' '/nix/store/21kk0il61l6nba4p8baj9jp9q2gixmw2-lsp-types-2.3.0.1' '/nix/store/dcr19vy3hdr9kgxkrf6kyagr4b2s6qk0-generic-arbitrary-1.0.1' '/nix/store/4hxww8gcq7yciigi7bbmzwi6p6517xnn-mod-0.2.0.1' '/nix/store/g6rxashy59pamm6hfhy8jxbyqnqpgwbi-semirings-0.7' '/nix/store/r9d5j46sfjfsqzand1icdgwd8hr1dd4s-quickcheck-instances-0.3.32' '/nix/store/y038da0sj8lysw5sakcy9ch6xrpwfnrq-old-time-1.1.0.4' '/nix/store/nsg02xppglxrgdx74m4cp0qp2f2xcc7g-row-types-1.0.1.2' '/nix/store/08hb95mfad5pdk56lrnnl06n8a5jgjnk-generic-lens-2.2.2.0' '/nix/store/f4klqlxwjbsfzk3xq3w6big1kqpa5yqd-generic-lens-core-2.2.1.0' '/nix/store/7457a9d7dxv5h35cyyfb87d7ldhpy172-indexed-profunctors-0.1.1.1' '/nix/store/asq98g7pp1q5p48ijhs2lvjl3lg7qlqh-safe-0.3.21' '/nix/store/3ygbh23kzq5hd6mvd6fc52b2jgrfz9jp-regex-1.1.0.2' '/nix/store/hqvm4jkcd9jijjbv5rrycxxdxkwm0a7h-regex-pcre-builtin-0.95.2.3.8.44' '/nix/store/7jb2giaw2s26ss70xrmyiv9pgdv459lw-regex-tdfa-1.3.2.3' '/nix/store/rj4f7hn4nymhshq3p57wghsgfaz4pn9z-time-locale-compat-0.1.1.5' '/nix/store/56x0yraysxkacxn9mmxsvzsav4f9n8nl-utf8-string-1.0.2' '/nix/store/g0yyqf91cwlsvxgkgjp065fgjz04sbcq-sorted-list-0.2.3.1' '/nix/store/6kmwsy5vrmshj95g488ggfx1p98bw017-text-rope-0.2' '/nix/store/bapgwv13sfq8dax6fl0wihsqhc10jw5i-opentelemetry-0.8.0' '/nix/store/2z8akk1wqywbr2y55i6c9siqvm2wf83k-implicit-hie-0.1.4.0' '/nix/store/7prqn8sns1g4vc3qd363h1dbfhqc51kh-filepattern-0.1.3' '/nix/store/jf9nq4wpk54q73wx5835m16vymr01s1v-gitrev-1.3.1' '/nix/store/84kwdhg7igxyr9ygz3bm5g892a69rn7h-githash-0.1.7.0' '/nix/store/2pdbry6bcpfld098zk9j8a8clvc2j05c-hlint-3.8' '/nix/store/baahr3imswa2s79zrxlhf042n1sqnzrm-cpphs-1.20.9.1' '/nix/store/mb3n4bpd6qin7r8wlwaf0w2g9qfr1mip-polyparse-1.13' '/nix/store/lq37ywbz73757714ipqcdsym0n19dl3k-deriving-aeson-0.2.10' '/nix/store/04rlbf5w1crdr98miy33zvr12wbqk5yj-hscolour-1.25' '/nix/store/afria4xq0pj6l3j6v59zrc7g8a46pcd1-hls-test-utils-2.10.0.0' '/nix/store/1rch13cfr40sr3hga5571x4hjfbwz3cd-lsp-test-0.17.1.1' '/nix/store/zfv1ph2c6anqk4nvhgm1lvpb8y703mhb-conduit-parse-0.2.1.1' '/nix/store/dp76zd34ghr5prfzwpry8jnqxsfpl8bd-parsers-0.12.12' '/nix/store/vv8na2f7p49zj0mqafpf421qk33sn7ap-charset-0.3.12' '/nix/store/kb153cfxw0508smbvniwd7pawmbx9xri-neat-interpolation-0.5.1.4' '/nix/store/1gkrzh4fl4m73mvc988w474nachm86al-tasty-expected-failure-0.12.3' '/nix/store/6rdm13pxhp70d0ghyzg72skgx2f71bv2-unbounded-delays-0.1.1.1' '/nix/store/3mxprqzh90zb5gz6vw9bmym7mss5vgh4-tasty-golden-2.3.5' '/nix/store/3zf6ak469f5vy1bbcdzcb5aa5z5s7bid-tasty-hunit-0.10.2' '/nix/store/5wrfw3p5bhaz7s07nvy00xkvldm22hgg-tasty-rerun-1.1.20' '/nix/store/wqqybzc6jsq24cljqz2cjkrnambv734s-optparse-simple-0.1.1.4' '/nix/store/j0f9i8pdqs2vca9j5si7hzs5s7ms8n4m-ormolu-0.7.4.0' '/nix/store/wsx1hqwkdm541dv2gn0r98wbwjwqslgn-ormolu-0.7.4.0-bin' '/nix/store/z3gxkskb1f7hrp883pziv9j3xzyrxn8a-process-extras-0.7.4' '/nix/store/a8y1hiyyflp4n7h69h8knnx750ygm0xw-generic-deriving-1.14.6' '/nix/store/pihfid9zk154nr9q7jmj1w7nsisy7336-ListLike-4.7.8.3' '/nix/store/g2agrr8h1m74d6vh6cylm6v93zi46zaz-fmlist-0.9.4' '/nix/store/0mzc0wcjj5jz1ylqfalp484yf7rm5c0x-regex-applicative-0.3.4' '/nix/store/kjigb01qs04x1iwbzxplii9mg7ldkbxs-filtrable-0.1.6.0' '/nix/store/zyy075lfccw7lsi1ri435lpx30qv4s23-retrie-1.2.3' '/nix/store/cn2h5qflhyy8rhrd82f11bw1rgbm9d5v-random-shuffle-0.0.4' '/nix/store/h226aql1cw3bxd8p4m2sfbpbganhl41n-MonadRandom-0.6.2' '/nix/store/fy2nx3cp0g8qsa7wlpdcygyd7a1n6d8v-shake-0.19.8' '/nix/store/dg9137py6qaacxdvy0f81mkk9dm0sbpa-heaps-0.4.1' '/nix/store/bzf46mz0gxvq5fxyx1a2zbxd22z6lzs0-stan-0.2.0.0' '/nix/store/kh06xxc4gv841bq789yz0pb3f109i0ic-base64-1.0' '/nix/store/05qvkmnqm16gxmsn1n6xf024c0svr0gc-blaze-html-0.9.2.0' '/nix/store/xj5d7la8b4l01yfy93islhk4xabg585f-blaze-markup-0.8.3.0' '/nix/store/ppiz1llbkm0gfdkkrk5b6dnlg2hxak2p-clay-0.15.0' '/nix/store/krn19ij5j7wzbyv5y7vk7b1b0vlyy42l-colourista-0.1.0.2' '/nix/store/kan4hn9pc7rzh1ns6hbnp28l67iiyl9s-dir-traverse-0.2.3.0' '/nix/store/azpp22l3mp6q1f24yhxjl5x529qrcibg-extensions-0.1.0.1' '/nix/store/vz09ccjhpmi6pn3j2gaiciw0ldmfkcqz-microaeson-0.1.0.2' '/nix/store/5jvgjdy51y4w3gdv20rkd8awj4hx4vcs-pretty-simple-4.1.3.0' '/nix/store/vvgka5jykvvc3lr85yskxsszcl0kaclc-relude-1.2.2.0' '/nix/store/ramlfwzgfbxhhgavi960wsfj41w8y2hv-slist-0.2.1.0' '/nix/store/h65kmmdhmy1a39c8qkqml95c2l2s9zi7-tomland-1.3.3.3' '/nix/store/xhqbizrms8y3zn32z3vhlllw1ri02av8-validation-selective-0.2.0.0' '/nix/store/xd79pfgbyj633xa4iyma1pgbn6db5361-selective-0.7.0.1' '/nix/store/mnyq0v0n1hs2cac4xidl0kdxpm4bxhdr-trial-0.0.0.0' '/nix/store/b6m6xzz245psq2ky4d7bz1mh7ag88bj2-trial-optparse-applicative-0.0.0.0' '/nix/store/dh3i2yikicxbc56ykm6bc2aa1a1xjqg9-trial-tomland-0.0.0.0' '/nix/store/da01ijn7nwxxd1jicjlgdhp7w1sc63fl-stylish-haskell-0.14.6.0' '/nix/store/3mpjgk1gvzkn2mbhphm5zlr9ijxlqarn-HsYAML-0.2.1.5' '/nix/store/7nvvlglbaviaa6ibz698ii6gsy9f2y5h-HsYAML-aeson-0.2.0.2' '/nix/store/9v9c12qmfsyiz79b92s5dcsh95fwiw63-ghcid-0.8.9' '/nix/store/aasikddzz36lnakq01svm0rv4mds2q29-fsnotify-0.4.2.0' '/nix/store/rvm57k8pjjrfjyxm0zb4dq8k2i3lg774-hinotify-0.4.2' '/nix/store/rj8vj3330l1vgrmnmp3cd88w4zhxkcf2-monad-logger-0.3.42' '/nix/store/1nn6w6m3ri303r7w862gfwdiahp7jn9h-fast-logger-3.2.5' '/nix/store/m4l9m3wvgfla13f1nn75g40iwzjcllm5-auto-update-0.2.6' '/nix/store/qqzydgr6hn9js1zllv8j1m3rhl4rmvd6-easy-file-0.2.5' '/nix/store/0fg5v4n6kjq1ad2pih7plk2a98a921zf-unix-time-0.4.16' '/nix/store/2jpf60rdlpql639875lsdxi2p2s6jkz9-lifted-base-0.2.3.12' '/nix/store/8xascnrc6n08ppjrlncik54sf8h9ck60-monad-loops-0.4.3' '/nix/store/7j944r5li5l4wafr0qpqkig1hmr67801-stm-chans-3.0.0.9' '/nix/store/vjn2z6m4q1nj72s88ms4g2ymv958wana-retry-0.9.3.1' '/nix/store/7bcvg7l28bdmpjawhqc01h0r1m96lai5-mtl-compat-0.2.2' '/nix/store/fgwcpkn03h6nkr6ak9zavklxklnfyc6b-string-interpolate-0.3.4.0' '/nix/store/z67cd0150lk106zfilzkqlv9m36y0ndc-haskell-src-meta-0.8.15' '/nix/store/6yz25j820x0jjg3kyk233ppmrjxnfn0j-th-orphans-0.13.16' '/nix/store/k7l89diaygcdl7102kwhwvd1n24gmlan-th-lift-0.8.6' '/nix/store/fy56m3svp9fncg5l0l3xszcgydwxwhk9-th-reify-many-0.1.10' '/nix/store/jsicxb7cna13x8gx5k5bhwsz0wwq17ki-th-expand-syns-0.4.12.0' '/nix/store/p5vj73bzdx76nlgan93xzmq23024hria-text-conversions-0.3.1.1' '/nix/store/l09vzdnjgfg4nbajsvjw48j3pff8fa6s-ghcid-0.8.9-bin' '/nix/store/4zwwbki3rd30l7sb4bcanj4lhpjy07xi-nixpkgs-fmt-1.3.0' )
declare -a pkgsTargetTarget=('/nix/store/jfnx02k29ca8cyk32fqv3q6842h0v93j-ncurses-6.5' '/nix/store/paqdsvmj4fwhc2w6rr884c3kymxl69k0-libffi-3.4.8' '/nix/store/hx43gnc9mwk61dzq7vd90ql8nlkifjjv-elfutils-0.192' '/nix/store/lgll5hzf733bjhhmd0j49gz0vy1hv7aa-gmp-with-cxx-6.3.0' )
declare -a postFixupHooks=('noBrokenSymlinksInAllOutputs' '_makeSymlinksRelativeInAllOutputs' '_multioutPropagateDev' )
declare -a postUnpackHooks=('_updateSourceDateEpochFromSourceRoot' )
declare -a preConfigureHooks=('_multioutConfig' )
preConfigurePhases=' updateAutotoolsGnuConfigScriptsPhase'
declare -a preFixupHooks=('_moveToShare' '_multioutDocs' '_multioutDevs' )
prefix='/home/viking/projects/ccc/outputs/out'
declare -a propagatedBuildDepFiles=('propagated-build-build-deps' 'propagated-native-build-inputs' 'propagated-build-target-deps' )
propagatedBuildInputs=''
export propagatedBuildInputs
declare -a propagatedHostDepFiles=('propagated-host-host-deps' 'propagated-build-inputs' )
propagatedNativeBuildInputs=''
export propagatedNativeBuildInputs
declare -a propagatedTargetDepFiles=('propagated-target-target-deps' )
shell='/nix/store/xg75pc4yyfd5n2fimhb98ps910q5lm5n-bash-5.2p37/bin/bash'
export shell
shellHook='echo "Welcome to the ccc development environment!"
'
export shellHook
stdenv='/nix/store/zf280lsqj4562abhccwhwdpaswwhi9js-stdenv-linux'
export stdenv
strictDeps=''
export strictDeps
system='x86_64-linux'
export system
declare -a unpackCmdHooks=('_defaultUnpack' )
_activatePkgs ()
{
 
    local hostOffset targetOffset;
    local pkg;
    for hostOffset in "${allPlatOffsets[@]}";
    do
        local pkgsVar="${pkgAccumVarVars[hostOffset + 1]}";
        for targetOffset in "${allPlatOffsets[@]}";
        do
            (( hostOffset <= targetOffset )) || continue;
            local pkgsRef="${pkgsVar}[$targetOffset - $hostOffset]";
            local pkgsSlice="${!pkgsRef}[@]";
            for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
            do
                activatePackage "$pkg" "$hostOffset" "$targetOffset";
            done;
        done;
    done
}
_addRpathPrefix ()
{
 
    if [ "${NIX_NO_SELF_RPATH:-0}" != 1 ]; then
        export NIX_LDFLAGS="-rpath $1/lib ${NIX_LDFLAGS-}";
    fi
}
_addToEnv ()
{
 
    local depHostOffset depTargetOffset;
    local pkg;
    for depHostOffset in "${allPlatOffsets[@]}";
    do
        local hookVar="${pkgHookVarVars[depHostOffset + 1]}";
        local pkgsVar="${pkgAccumVarVars[depHostOffset + 1]}";
        for depTargetOffset in "${allPlatOffsets[@]}";
        do
            (( depHostOffset <= depTargetOffset )) || continue;
            local hookRef="${hookVar}[$depTargetOffset - $depHostOffset]";
            if [[ -z "${strictDeps-}" ]]; then
                local visitedPkgs="";
                for pkg in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}" "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}" "${pkgsTargetTarget[@]}";
                do
                    if [[ "$visitedPkgs" = *"$pkg"* ]]; then
                        continue;
                    fi;
                    runHook "${!hookRef}" "$pkg";
                    visitedPkgs+=" $pkg";
                done;
            else
                local pkgsRef="${pkgsVar}[$depTargetOffset - $depHostOffset]";
                local pkgsSlice="${!pkgsRef}[@]";
                for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
                do
                    runHook "${!hookRef}" "$pkg";
                done;
            fi;
        done;
    done
}
_allFlags ()
{
 
    export system pname name version;
    while IFS='' read -r varName; do
        nixTalkativeLog "@${varName}@ -> ${!varName}";
        args+=("--subst-var" "$varName");
    done < <(awk 'BEGIN { for (v in ENVIRON) if (v ~ /^[a-z][a-zA-Z0-9_]*$/) print v }')
}
_assignFirst ()
{
 
    local varName="$1";
    local _var;
    local REMOVE=REMOVE;
    shift;
    for _var in "$@";
    do
        if [ -n "${!_var-}" ]; then
            eval "${varName}"="${_var}";
            return;
        fi;
    done;
    echo;
    echo "error: _assignFirst: could not find a non-empty variable whose name to assign to ${varName}.";
    echo "       The following variables were all unset or empty:";
    echo "           $*";
    if [ -z "${out:-}" ]; then
        echo '       If you do not want an "out" output in your derivation, make sure to define';
        echo '       the other specific required outputs. This can be achieved by picking one';
        echo "       of the above as an output.";
        echo '       You do not have to remove "out" if you want to have a different default';
        echo '       output, because the first output is taken as a default.';
        echo;
    fi;
    return 1
}
_callImplicitHook ()
{
 
    local def="$1";
    local hookName="$2";
    if declare -F "$hookName" > /dev/null; then
        nixTalkativeLog "calling implicit '$hookName' function hook";
        "$hookName";
    else
        if type -p "$hookName" > /dev/null; then
            nixTalkativeLog "sourcing implicit '$hookName' script hook";
            source "$hookName";
        else
            if [ -n "${!hookName:-}" ]; then
                nixTalkativeLog "evaling implicit '$hookName' string hook";
                eval "${!hookName}";
            else
                return "$def";
            fi;
        fi;
    fi
}
_defaultUnpack ()
{
 
    local fn="$1";
    local destination;
    if [ -d "$fn" ]; then
        destination="$(stripHash "$fn")";
        if [ -e "$destination" ]; then
            echo "Cannot copy $fn to $destination: destination already exists!";
            echo "Did you specify two \"srcs\" with the same \"name\"?";
            return 1;
        fi;
        cp -r --preserve=mode,timestamps --reflink=auto -- "$fn" "$destination";
    else
        case "$fn" in 
            *.tar.xz | *.tar.lzma | *.txz)
                ( XZ_OPT="--threads=$NIX_BUILD_CORES" xz -d < "$fn";
                true ) | tar xf - --mode=+w --warning=no-timestamp
            ;;
            *.tar | *.tar.* | *.tgz | *.tbz2 | *.tbz)
                tar xf "$fn" --mode=+w --warning=no-timestamp
            ;;
            *)
                return 1
            ;;
        esac;
    fi
}
_doStrip ()
{
 
    local -ra flags=(dontStripHost dontStripTarget);
    local -ra debugDirs=(stripDebugList stripDebugListTarget);
    local -ra allDirs=(stripAllList stripAllListTarget);
    local -ra stripCmds=(STRIP STRIP_FOR_TARGET);
    local -ra ranlibCmds=(RANLIB RANLIB_FOR_TARGET);
    stripDebugList=${stripDebugList[*]:-lib lib32 lib64 libexec bin sbin Applications Library/Frameworks};
    stripDebugListTarget=${stripDebugListTarget[*]:-};
    stripAllList=${stripAllList[*]:-};
    stripAllListTarget=${stripAllListTarget[*]:-};
    local i;
    for i in ${!stripCmds[@]};
    do
        local -n flag="${flags[$i]}";
        local -n debugDirList="${debugDirs[$i]}";
        local -n allDirList="${allDirs[$i]}";
        local -n stripCmd="${stripCmds[$i]}";
        local -n ranlibCmd="${ranlibCmds[$i]}";
        if [[ -n "${dontStrip-}" || -n "${flag-}" ]] || ! type -f "${stripCmd-}" 2> /dev/null 1>&2; then
            continue;
        fi;
        stripDirs "$stripCmd" "$ranlibCmd" "$debugDirList" "${stripDebugFlags[*]:--S -p}";
        stripDirs "$stripCmd" "$ranlibCmd" "$allDirList" "${stripAllFlags[*]:--s -p}";
    done
}
_eval ()
{
 
    if declare -F "$1" > /dev/null 2>&1; then
        "$@";
    else
        eval "$1";
    fi
}
_logHook ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]]; then
        return;
    fi;
    local hookKind="$1";
    local hookExpr="$2";
    shift 2;
    if declare -F "$hookExpr" > /dev/null 2>&1; then
        nixTalkativeLog "calling '$hookKind' function hook '$hookExpr'" "$@";
    else
        if type -p "$hookExpr" > /dev/null; then
            nixTalkativeLog "sourcing '$hookKind' script hook '$hookExpr'";
        else
            if [[ "$hookExpr" != "_callImplicitHook"* ]]; then
                local exprToOutput;
                if [[ ${NIX_DEBUG:-0} -ge 5 ]]; then
                    exprToOutput="$hookExpr";
                else
                    local hookExprLine;
                    while IFS= read -r hookExprLine; do
                        hookExprLine="${hookExprLine#"${hookExprLine%%[![:space:]]*}"}";
                        if [[ -n "$hookExprLine" ]]; then
                            exprToOutput+="$hookExprLine\\n ";
                        fi;
                    done <<< "$hookExpr";
                    exprToOutput="${exprToOutput%%\\n }";
                fi;
                nixTalkativeLog "evaling '$hookKind' string hook '$exprToOutput'";
            fi;
        fi;
    fi
}
_makeSymlinksRelative ()
{
 
    local symlinkTarget;
    if [ "${dontRewriteSymlinks-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    while IFS= read -r -d '' f; do
        symlinkTarget=$(readlink "$f");
        if [[ "$symlinkTarget"/ != "$prefix"/* ]]; then
            continue;
        fi;
        if [ ! -e "$symlinkTarget" ]; then
            echo "the symlink $f is broken, it points to $symlinkTarget (which is missing)";
        fi;
        echo "rewriting symlink $f to be relative to $prefix";
        ln -snrf "$symlinkTarget" "$f";
    done < <(find $prefix -type l -print0)
}
_makeSymlinksRelativeInAllOutputs ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" _makeSymlinksRelative;
    done
}
_moveLib64 ()
{
 
    if [ "${dontMoveLib64-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/lib64" -o -L "$prefix/lib64" ]; then
        return;
    fi;
    echo "moving $prefix/lib64/* to $prefix/lib";
    mkdir -p $prefix/lib;
    shopt -s dotglob;
    for i in $prefix/lib64/*;
    do
        mv --no-clobber "$i" $prefix/lib;
    done;
    shopt -u dotglob;
    rmdir $prefix/lib64;
    ln -s lib $prefix/lib64
}
_moveSbin ()
{
 
    if [ "${dontMoveSbin-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/sbin" -o -L "$prefix/sbin" ]; then
        return;
    fi;
    echo "moving $prefix/sbin/* to $prefix/bin";
    mkdir -p $prefix/bin;
    shopt -s dotglob;
    for i in $prefix/sbin/*;
    do
        mv "$i" $prefix/bin;
    done;
    shopt -u dotglob;
    rmdir $prefix/sbin;
    ln -s bin $prefix/sbin
}
_moveSystemdUserUnits ()
{
 
    if [ "${dontMoveSystemdUserUnits:-0}" = 1 ]; then
        return;
    fi;
    if [ ! -e "${prefix:?}/lib/systemd/user" ]; then
        return;
    fi;
    local source="$prefix/lib/systemd/user";
    local target="$prefix/share/systemd/user";
    echo "moving $source/* to $target";
    mkdir -p "$target";
    ( shopt -s dotglob;
    for i in "$source"/*;
    do
        mv "$i" "$target";
    done );
    rmdir "$source";
    ln -s "$target" "$source"
}
_moveToShare ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        if [ -z "${forceShare-}" ]; then
            forceShare=(man doc info);
        fi;
    else
        forceShare=(${forceShare:-man doc info});
    fi;
    if [[ -z "$out" ]]; then
        return;
    fi;
    for d in "${forceShare[@]}";
    do
        if [ -d "$out/$d" ]; then
            if [ -d "$out/share/$d" ]; then
                echo "both $d/ and share/$d/ exist!";
            else
                echo "moving $out/$d to $out/share/$d";
                mkdir -p $out/share;
                mv $out/$d $out/share/;
            fi;
        fi;
    done
}
_multioutConfig ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${setOutputFlags-1}" ]; then
        return;
    fi;
    if [ -z "${shareDocName:-}" ]; then
        local confScript="${configureScript:-}";
        if [ -z "$confScript" ] && [ -x ./configure ]; then
            confScript=./configure;
        fi;
        if [ -f "$confScript" ]; then
            local shareDocName="$(sed -n "s/^PACKAGE_TARNAME='\(.*\)'$/\1/p" < "$confScript")";
        fi;
        if [ -z "$shareDocName" ] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_-]'; then
            shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
        fi;
    fi;
    prependToVar configureFlags --bindir="${!outputBin}"/bin --sbindir="${!outputBin}"/sbin --includedir="${!outputInclude}"/include --mandir="${!outputMan}"/share/man --infodir="${!outputInfo}"/share/info --docdir="${!outputDoc}"/share/doc/"${shareDocName}" --libdir="${!outputLib}"/lib --libexecdir="${!outputLib}"/libexec --localedir="${!outputLib}"/share/locale;
    prependToVar installFlags pkgconfigdir="${!outputDev}"/lib/pkgconfig m4datadir="${!outputDev}"/share/aclocal aclocaldir="${!outputDev}"/share/aclocal
}
_multioutDevs ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${moveToDev-1}" ]; then
        return;
    fi;
    moveToOutput include "${!outputInclude}";
    moveToOutput lib/pkgconfig "${!outputDev}";
    moveToOutput share/pkgconfig "${!outputDev}";
    moveToOutput lib/cmake "${!outputDev}";
    moveToOutput share/aclocal "${!outputDev}";
    for f in "${!outputDev}"/{lib,share}/pkgconfig/*.pc;
    do
        echo "Patching '$f' includedir to output ${!outputInclude}";
        sed -i "/^includedir=/s,=\${prefix},=${!outputInclude}," "$f";
    done
}
_multioutDocs ()
{
 
    local REMOVE=REMOVE;
    moveToOutput share/info "${!outputInfo}";
    moveToOutput share/doc "${!outputDoc}";
    moveToOutput share/gtk-doc "${!outputDevdoc}";
    moveToOutput share/devhelp/books "${!outputDevdoc}";
    moveToOutput share/man "${!outputMan}";
    moveToOutput share/man/man3 "${!outputDevman}"
}
_multioutPropagateDev ()
{
 
    if [ "$(getAllOutputNames)" = "out" ]; then
        return;
    fi;
    local outputFirst;
    for outputFirst in $(getAllOutputNames);
    do
        break;
    done;
    local propagaterOutput="$outputDev";
    if [ -z "$propagaterOutput" ]; then
        propagaterOutput="$outputFirst";
    fi;
    if [ -z "${propagatedBuildOutputs+1}" ]; then
        local po_dirty="$outputBin $outputInclude $outputLib";
        set +o pipefail;
        propagatedBuildOutputs=`echo "$po_dirty"             | tr -s ' ' '\n' | grep -v -F "$propagaterOutput"             | sort -u | tr '\n' ' ' `;
        set -o pipefail;
    fi;
    if [ -z "$propagatedBuildOutputs" ]; then
        return;
    fi;
    mkdir -p "${!propagaterOutput}"/nix-support;
    for output in $propagatedBuildOutputs;
    do
        echo -n " ${!output}" >> "${!propagaterOutput}"/nix-support/propagated-build-inputs;
    done
}
_nixLogWithLevel ()
{
 
    [[ -z ${NIX_LOG_FD-} || ${NIX_DEBUG:-0} -lt ${1:?} ]] && return 0;
    local logLevel;
    case "${1:?}" in 
        0)
            logLevel=ERROR
        ;;
        1)
            logLevel=WARN
        ;;
        2)
            logLevel=NOTICE
        ;;
        3)
            logLevel=INFO
        ;;
        4)
            logLevel=TALKATIVE
        ;;
        5)
            logLevel=CHATTY
        ;;
        6)
            logLevel=DEBUG
        ;;
        7)
            logLevel=VOMIT
        ;;
        *)
            echo "_nixLogWithLevel: called with invalid log level: ${1:?}" >&"$NIX_LOG_FD";
            return 1
        ;;
    esac;
    local callerName="${FUNCNAME[2]}";
    if [[ $callerName == "_callImplicitHook" ]]; then
        callerName="${hookName:?}";
    fi;
    printf "%s: %s: %s\n" "$logLevel" "$callerName" "${2:?}" >&"$NIX_LOG_FD"
}
_overrideFirst ()
{
 
    if [ -z "${!1-}" ]; then
        _assignFirst "$@";
    fi
}
_pruneLibtoolFiles ()
{
 
    if [ "${dontPruneLibtoolFiles-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    find "$prefix" -type f -name '*.la' -exec grep -q '^# Generated by .*libtool' {} \; -exec grep -q "^old_library=''" {} \; -exec sed -i {} -e "/^dependency_libs='[^']/ c dependency_libs='' #pruned" \;
}
_updateSourceDateEpochFromSourceRoot ()
{
 
    if [ -n "$sourceRoot" ]; then
        updateSourceDateEpoch "$sourceRoot";
    fi
}
activatePackage ()
{
 
    local pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    if [ -f "$pkg" ]; then
        nixTalkativeLog "sourcing setup hook '$pkg'";
        source "$pkg";
    fi;
    if [[ -z "${strictDeps-}" || "$hostOffset" -le -1 ]]; then
        addToSearchPath _PATH "$pkg/bin";
    fi;
    if (( hostOffset <= -1 )); then
        addToSearchPath _XDG_DATA_DIRS "$pkg/share";
    fi;
    if [[ "$hostOffset" -eq 0 && -d "$pkg/bin" ]]; then
        addToSearchPath _HOST_PATH "$pkg/bin";
    fi;
    if [[ -f "$pkg/nix-support/setup-hook" ]]; then
        nixTalkativeLog "sourcing setup hook '$pkg/nix-support/setup-hook'";
        source "$pkg/nix-support/setup-hook";
    fi
}
addEnvHooks ()
{
 
    local depHostOffset="$1";
    shift;
    local pkgHookVarsSlice="${pkgHookVarVars[$depHostOffset + 1]}[@]";
    local pkgHookVar;
    for pkgHookVar in "${!pkgHookVarsSlice}";
    do
        eval "${pkgHookVar}s"'+=("$@")';
    done
}
addToSearchPath ()
{
 
    addToSearchPathWithCustomDelimiter ":" "$@"
}
addToSearchPathWithCustomDelimiter ()
{
 
    local delimiter="$1";
    local varName="$2";
    local dir="$3";
    if [[ -d "$dir" && "${!varName:+${delimiter}${!varName}${delimiter}}" != *"${delimiter}${dir}${delimiter}"* ]]; then
        export "${varName}=${!varName:+${!varName}${delimiter}}${dir}";
    fi
}
appendToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if type=$(declare -p "$1" 2> /dev/null); then
        case "${type#* }" in 
            -A*)
                echo "appendToVar(): ERROR: trying to use appendToVar on an associative array, use variable+=([\"X\"]=\"Y\") instead." 1>&2;
                return 1
            ;;
            -a*)
                useArray=true
            ;;
            *)
                useArray=false
            ;;
        esac;
    fi;
    shift;
    if $useArray; then
        nameref=(${nameref+"${nameref[@]}"} "$@");
    else
        nameref="${nameref-} $*";
    fi
}
auditTmpdir ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "checking for references to $TMPDIR/ in $dir...";
    local i;
    find "$dir" -type f -print0 | while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if isELF "$i"; then
            if { 
                printf :;
                patchelf --print-rpath "$i"
            } | grep -q -F ":$TMPDIR/"; then
                echo "RPATH of binary $i contains a forbidden reference to $TMPDIR/";
                exit 1;
            fi;
        fi;
        if isScript "$i"; then
            if [ -e "$(dirname "$i")/.$(basename "$i")-wrapped" ]; then
                if grep -q -F "$TMPDIR/" "$i"; then
                    echo "wrapper script $i contains a forbidden reference to $TMPDIR/";
                    exit 1;
                fi;
            fi;
        fi;
    done
}
bintoolsWrapper_addLDVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [[ -d "$1/lib64" && ! -L "$1/lib64" ]]; then
        export NIX_LDFLAGS${role_post}+=" -L$1/lib64";
    fi;
    if [[ -d "$1/lib" ]]; then
        local -a glob=($1/lib/lib*);
        if [ "${#glob[*]}" -gt 0 ]; then
            export NIX_LDFLAGS${role_post}+=" -L$1/lib";
        fi;
    fi
}
buildPhase ()
{
 
    runHook preBuild;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom buildPhase, doing nothing";
    else
        foundMakefile=1;
        local flagsArray=(${enableParallelBuilding:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
        concatTo flagsArray makeFlags makeFlagsArray buildFlags buildFlagsArray;
        echoCmd 'build flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postBuild
}
ccWrapper_addCVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [ -d "$1/include" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -isystem $1/include";
    fi;
    if [ -d "$1/Library/Frameworks" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -iframework $1/Library/Frameworks";
    fi
}
checkPhase ()
{
 
    runHook preCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom checkPhase, doing nothing";
        runHook postCheck;
        return;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        if make -n ${makefile:+-f $makefile} check > /dev/null 2>&1; then
            checkTarget="check";
        else
            if make -n ${makefile:+-f $makefile} test > /dev/null 2>&1; then
                checkTarget="test";
            fi;
        fi;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        echo "no check/test target in ${makefile:-Makefile}, doing nothing";
    else
        local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
        concatTo flagsArray makeFlags makeFlagsArray checkFlags=VERBOSE=y checkFlagsArray checkTarget;
        echoCmd 'check flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postCheck
}
compressManPages ()
{
 
    local dir="$1";
    if [ -L "$dir"/share ] || [ -L "$dir"/share/man ] || [ ! -d "$dir/share/man" ]; then
        return;
    fi;
    echo "gzipping man pages under $dir/share/man/";
    find "$dir"/share/man/ -type f -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | while IFS= read -r -d '' f; do
        if gzip -c -n "$f" > "$f".gz; then
            rm "$f";
        else
            rm "$f".gz;
        fi;
    done;
    find "$dir"/share/man/ -type l -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | sort -z | while IFS= read -r -d '' f; do
        local target;
        target="$(readlink -f "$f")";
        if [ -f "$target".gz ]; then
            ln -sf "$target".gz "$f".gz && rm "$f";
        fi;
    done
}
concatStringsSep ()
{
 
    local sep="$1";
    local name="$2";
    local type oldifs;
    if type=$(declare -p "$name" 2> /dev/null); then
        local -n nameref="$name";
        case "${type#* }" in 
            -A*)
                echo "concatStringsSep(): ERROR: trying to use concatStringsSep on an associative array." 1>&2;
                return 1
            ;;
            -a*)
                local IFS="$(printf '\036')"
            ;;
            *)
                local IFS=" "
            ;;
        esac;
        local ifs_separated="${nameref[*]}";
        echo -n "${ifs_separated//"$IFS"/"$sep"}";
    fi
}
concatTo ()
{
 
    local -;
    set -o noglob;
    local -n targetref="$1";
    shift;
    local arg default name type;
    for arg in "$@";
    do
        IFS="=" read -r name default <<< "$arg";
        local -n nameref="$name";
        if [[ -z "${nameref[*]}" && -n "$default" ]]; then
            targetref+=("$default");
        else
            if type=$(declare -p "$name" 2> /dev/null); then
                case "${type#* }" in 
                    -A*)
                        echo "concatTo(): ERROR: trying to use concatTo on an associative array." 1>&2;
                        return 1
                    ;;
                    -a*)
                        targetref+=("${nameref[@]}")
                    ;;
                    *)
                        if [[ "$name" = *"Array" ]]; then
                            nixErrorLog "concatTo(): $name is not declared as array, treating as a singleton. This will become an error in future";
                            targetref+=(${nameref+"${nameref[@]}"});
                        else
                            targetref+=(${nameref-});
                        fi
                    ;;
                esac;
            fi;
        fi;
    done
}
configurePhase ()
{
 
    runHook preConfigure;
    : "${configureScript=}";
    if [[ -z "$configureScript" && -x ./configure ]]; then
        configureScript=./configure;
    fi;
    if [ -z "${dontFixLibtool:-}" ]; then
        export lt_cv_deplibs_check_method="${lt_cv_deplibs_check_method-pass_all}";
        local i;
        find . -iname "ltmain.sh" -print0 | while IFS='' read -r -d '' i; do
            echo "fixing libtool script $i";
            fixLibtool "$i";
        done;
        CONFIGURE_MTIME_REFERENCE=$(mktemp configure.mtime.reference.XXXXXX);
        find . -executable -type f -name configure -exec grep -l 'GNU Libtool is free software; you can redistribute it and/or modify' {} \; -exec touch -r {} "$CONFIGURE_MTIME_REFERENCE" \; -exec sed -i s_/usr/bin/file_file_g {} \; -exec touch -r "$CONFIGURE_MTIME_REFERENCE" {} \;;
        rm -f "$CONFIGURE_MTIME_REFERENCE";
    fi;
    if [[ -z "${dontAddPrefix:-}" && -n "$prefix" ]]; then
        prependToVar configureFlags "${prefixKey:---prefix=}$prefix";
    fi;
    if [[ -f "$configureScript" ]]; then
        if [ -z "${dontAddDisableDepTrack:-}" ]; then
            if grep -q dependency-tracking "$configureScript"; then
                prependToVar configureFlags --disable-dependency-tracking;
            fi;
        fi;
        if [ -z "${dontDisableStatic:-}" ]; then
            if grep -q enable-static "$configureScript"; then
                prependToVar configureFlags --disable-static;
            fi;
        fi;
        if [ -z "${dontPatchShebangsInConfigure:-}" ]; then
            patchShebangs --build "$configureScript";
        fi;
    fi;
    if [ -n "$configureScript" ]; then
        local -a flagsArray;
        concatTo flagsArray configureFlags configureFlagsArray;
        echoCmd 'configure flags' "${flagsArray[@]}";
        $configureScript "${flagsArray[@]}";
        unset flagsArray;
    else
        echo "no configure script, doing nothing";
    fi;
    runHook postConfigure
}
consumeEntire ()
{
 
    if IFS='' read -r -d '' "$1"; then
        echo "consumeEntire(): ERROR: Input null bytes, won't process" 1>&2;
        return 1;
    fi
}
distPhase ()
{
 
    runHook preDist;
    local flagsArray=();
    concatTo flagsArray distFlags distFlagsArray distTarget=dist;
    echo 'dist flags: %q' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    if [ "${dontCopyDist:-0}" != 1 ]; then
        mkdir -p "$out/tarballs";
        cp -pvd ${tarballs[*]:-*.tar.gz} "$out/tarballs";
    fi;
    runHook postDist
}
dumpVars ()
{
 
    if [ "${noDumpEnvVars:-0}" != 1 ]; then
        { 
            install -m 0600 /dev/null "$NIX_BUILD_TOP/env-vars" && export 2> /dev/null >| "$NIX_BUILD_TOP/env-vars"
        } || true;
    fi
}
echoCmd ()
{
 
    printf "%s:" "$1";
    shift;
    printf ' %q' "$@";
    echo
}
exitHandler ()
{
 
    exitCode="$?";
    set +e;
    if [ -n "${showBuildStats:-}" ]; then
        read -r -d '' -a buildTimes < <(times);
        echo "build times:";
        echo "user time for the shell             ${buildTimes[0]}";
        echo "system time for the shell           ${buildTimes[1]}";
        echo "user time for all child processes   ${buildTimes[2]}";
        echo "system time for all child processes ${buildTimes[3]}";
    fi;
    if (( "$exitCode" != 0 )); then
        runHook failureHook;
        if [ -n "${succeedOnFailure:-}" ]; then
            echo "build failed with exit code $exitCode (ignored)";
            mkdir -p "$out/nix-support";
            printf "%s" "$exitCode" > "$out/nix-support/failed";
            exit 0;
        fi;
    else
        runHook exitHook;
    fi;
    return "$exitCode"
}
findInputs ()
{
 
    local -r pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    local varVar="${pkgAccumVarVars[hostOffset + 1]}";
    local varRef="$varVar[$((targetOffset - hostOffset))]";
    local var="${!varRef}";
    unset -v varVar varRef;
    local varSlice="$var[*]";
    case " ${!varSlice-} " in 
        *" $pkg "*)
            return 0
        ;;
    esac;
    unset -v varSlice;
    eval "$var"'+=("$pkg")';
    if ! [ -e "$pkg" ]; then
        echo "build input $pkg does not exist" 1>&2;
        exit 1;
    fi;
    function mapOffset () 
    { 
        local -r inputOffset="$1";
        local -n outputOffset="$2";
        if (( inputOffset <= 0 )); then
            outputOffset=$((inputOffset + hostOffset));
        else
            outputOffset=$((inputOffset - 1 + targetOffset));
        fi
    };
    local relHostOffset;
    for relHostOffset in "${allPlatOffsets[@]}";
    do
        local files="${propagatedDepFilesVars[relHostOffset + 1]}";
        local hostOffsetNext;
        mapOffset "$relHostOffset" hostOffsetNext;
        (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
        local relTargetOffset;
        for relTargetOffset in "${allPlatOffsets[@]}";
        do
            (( "$relHostOffset" <= "$relTargetOffset" )) || continue;
            local fileRef="${files}[$relTargetOffset - $relHostOffset]";
            local file="${!fileRef}";
            unset -v fileRef;
            local targetOffsetNext;
            mapOffset "$relTargetOffset" targetOffsetNext;
            (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
            [[ -f "$pkg/nix-support/$file" ]] || continue;
            local pkgNext;
            read -r -d '' pkgNext < "$pkg/nix-support/$file" || true;
            for pkgNext in $pkgNext;
            do
                findInputs "$pkgNext" "$hostOffsetNext" "$targetOffsetNext";
            done;
        done;
    done
}
fixLibtool ()
{
 
    local search_path;
    for flag in $NIX_LDFLAGS;
    do
        case $flag in 
            -L*)
                search_path+=" ${flag#-L}"
            ;;
        esac;
    done;
    sed -i "$1" -e "s^eval \(sys_lib_search_path=\).*^\1'${search_path:-}'^" -e 's^eval sys_lib_.+search_path=.*^^'
}
fixupPhase ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        if [ -e "${!output}" ]; then
            chmod -R u+w,u-s,g-s "${!output}";
        fi;
    done;
    runHook preFixup;
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" runHook fixupOutput;
    done;
    recordPropagatedDependencies;
    if [ -n "${setupHook:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        substituteAll "$setupHook" "${!outputDev}/nix-support/setup-hook";
    fi;
    if [ -n "${setupHooks:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        local hook;
        for hook in ${setupHooks[@]};
        do
            local content;
            consumeEntire content < "$hook";
            substituteAllStream content "file '$hook'" >> "${!outputDev}/nix-support/setup-hook";
            unset -v content;
        done;
        unset -v hook;
    fi;
    if [ -n "${propagatedUserEnvPkgs[*]:-}" ]; then
        mkdir -p "${!outputBin}/nix-support";
        printWords "${propagatedUserEnvPkgs[@]}" > "${!outputBin}/nix-support/propagated-user-env-packages";
    fi;
    runHook postFixup
}
genericBuild ()
{
 
    export GZIP_NO_TIMESTAMPS=1;
    if [ -f "${buildCommandPath:-}" ]; then
        source "$buildCommandPath";
        return;
    fi;
    if [ -n "${buildCommand:-}" ]; then
        eval "$buildCommand";
        return;
    fi;
    if [ -z "${phases[*]:-}" ]; then
        phases="${prePhases[*]:-} unpackPhase patchPhase ${preConfigurePhases[*]:-}             configurePhase ${preBuildPhases[*]:-} buildPhase checkPhase             ${preInstallPhases[*]:-} installPhase ${preFixupPhases[*]:-} fixupPhase installCheckPhase             ${preDistPhases[*]:-} distPhase ${postPhases[*]:-}";
    fi;
    for curPhase in ${phases[*]};
    do
        runPhase "$curPhase";
    done
}
getAllOutputNames ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        echo "${!outputs[*]}";
    else
        echo "$outputs";
    fi
}
getHostRole ()
{
 
    getRole "$hostOffset"
}
getHostRoleEnvHook ()
{
 
    getRole "$depHostOffset"
}
getRole ()
{
 
    case $1 in 
        -1)
            role_post='_FOR_BUILD'
        ;;
        0)
            role_post=''
        ;;
        1)
            role_post='_FOR_TARGET'
        ;;
        *)
            echo "binutils-wrapper-2.44: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
getTargetRole ()
{
 
    getRole "$targetOffset"
}
getTargetRoleEnvHook ()
{
 
    getRole "$depTargetOffset"
}
getTargetRoleWrapper ()
{
 
    case $targetOffset in 
        -1)
            export NIX_BINTOOLS_WRAPPER_TARGET_BUILD_x86_64_unknown_linux_gnu=1
        ;;
        0)
            export NIX_BINTOOLS_WRAPPER_TARGET_HOST_x86_64_unknown_linux_gnu=1
        ;;
        1)
            export NIX_BINTOOLS_WRAPPER_TARGET_TARGET_x86_64_unknown_linux_gnu=1
        ;;
        *)
            echo "binutils-wrapper-2.44: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
installCheckPhase ()
{
 
    runHook preInstallCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom installCheckPhase, doing nothing";
    else
        if [[ -z "${installCheckTarget:-}" ]] && ! make -n ${makefile:+-f $makefile} "${installCheckTarget:-installcheck}" > /dev/null 2>&1; then
            echo "no installcheck target in ${makefile:-Makefile}, doing nothing";
        else
            local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
            concatTo flagsArray makeFlags makeFlagsArray installCheckFlags installCheckFlagsArray installCheckTarget=installcheck;
            echoCmd 'installcheck flags' "${flagsArray[@]}";
            make ${makefile:+-f $makefile} "${flagsArray[@]}";
            unset flagsArray;
        fi;
    fi;
    runHook postInstallCheck
}
installPhase ()
{
 
    runHook preInstall;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom installPhase, doing nothing";
        runHook postInstall;
        return;
    else
        foundMakefile=1;
    fi;
    if [ -n "$prefix" ]; then
        mkdir -p "$prefix";
    fi;
    local flagsArray=(${enableParallelInstalling:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
    concatTo flagsArray makeFlags makeFlagsArray installFlags installFlagsArray installTargets=install;
    echoCmd 'install flags' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    unset flagsArray;
    runHook postInstall
}
isELF ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [ "$magic" = 'ELF' ]; then
        return 0;
    else
        return 1;
    fi
}
isMachO ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xcf") || "$magic" = $(echo -ne "\xcf\xfa\xed\xfe") ]]; then
        return 0;
    else
        if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xce") || "$magic" = $(echo -ne "\xce\xfa\xed\xfe") ]]; then
            return 0;
        else
            if [[ "$magic" = $(echo -ne "\xca\xfe\xba\xbe") || "$magic" = $(echo -ne "\xbe\xba\xfe\xca") ]]; then
                return 0;
            else
                return 1;
            fi;
        fi;
    fi
}
isScript ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 2 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" =~ \#! ]]; then
        return 0;
    else
        return 1;
    fi
}
mapOffset ()
{
 
    local -r inputOffset="$1";
    local -n outputOffset="$2";
    if (( inputOffset <= 0 )); then
        outputOffset=$((inputOffset + hostOffset));
    else
        outputOffset=$((inputOffset - 1 + targetOffset));
    fi
}
moveToOutput ()
{
 
    local patt="$1";
    local dstOut="$2";
    local output;
    for output in $(getAllOutputNames);
    do
        if [ "${!output}" = "$dstOut" ]; then
            continue;
        fi;
        local srcPath;
        for srcPath in "${!output}"/$patt;
        do
            if [ ! -e "$srcPath" ] && [ ! -L "$srcPath" ]; then
                continue;
            fi;
            if [ "$dstOut" = REMOVE ]; then
                echo "Removing $srcPath";
                rm -r "$srcPath";
            else
                local dstPath="$dstOut${srcPath#${!output}}";
                echo "Moving $srcPath to $dstPath";
                if [ -d "$dstPath" ] && [ -d "$srcPath" ]; then
                    rmdir "$srcPath" --ignore-fail-on-non-empty;
                    if [ -d "$srcPath" ]; then
                        mv -t "$dstPath" "$srcPath"/*;
                        rmdir "$srcPath";
                    fi;
                else
                    mkdir -p "$(readlink -m "$dstPath/..")";
                    mv "$srcPath" "$dstPath";
                fi;
            fi;
            local srcParent="$(readlink -m "$srcPath/..")";
            if [ -n "$(find "$srcParent" -maxdepth 0 -type d -empty 2> /dev/null)" ]; then
                echo "Removing empty $srcParent/ and (possibly) its parents";
                rmdir -p --ignore-fail-on-non-empty "$srcParent" 2> /dev/null || true;
            fi;
        done;
    done
}
nixChattyLog ()
{
 
    _nixLogWithLevel 5 "$*"
}
nixDebugLog ()
{
 
    _nixLogWithLevel 6 "$*"
}
nixErrorLog ()
{
 
    _nixLogWithLevel 0 "$*"
}
nixInfoLog ()
{
 
    _nixLogWithLevel 3 "$*"
}
nixLog ()
{
 
    [[ -z ${NIX_LOG_FD-} ]] && return 0;
    local callerName="${FUNCNAME[1]}";
    if [[ $callerName == "_callImplicitHook" ]]; then
        callerName="${hookName:?}";
    fi;
    printf "%s: %s\n" "$callerName" "$*" >&"$NIX_LOG_FD"
}
nixNoticeLog ()
{
 
    _nixLogWithLevel 2 "$*"
}
nixTalkativeLog ()
{
 
    _nixLogWithLevel 4 "$*"
}
nixVomitLog ()
{
 
    _nixLogWithLevel 7 "$*"
}
nixWarnLog ()
{
 
    _nixLogWithLevel 1 "$*"
}
noBrokenSymlinks ()
{
 
    local -r output="${1:?}";
    local path;
    local pathParent;
    local symlinkTarget;
    local -i numDanglingSymlinks=0;
    local -i numReflexiveSymlinks=0;
    local -i numUnreadableSymlinks=0;
    if [[ ! -e $output ]]; then
        nixWarnLog "skipping non-existent output $output";
        return 0;
    fi;
    nixInfoLog "running on $output";
    while IFS= read -r -d '' path; do
        pathParent="$(dirname "$path")";
        if ! symlinkTarget="$(readlink "$path")"; then
            nixErrorLog "the symlink $path is unreadable";
            numUnreadableSymlinks+=1;
            continue;
        fi;
        if [[ $symlinkTarget == /* ]]; then
            nixInfoLog "symlink $path points to absolute target $symlinkTarget";
        else
            nixInfoLog "symlink $path points to relative target $symlinkTarget";
            symlinkTarget="$(realpath --no-symlinks --canonicalize-missing "$pathParent/$symlinkTarget")";
        fi;
        if [[ $symlinkTarget != "$NIX_STORE"/* ]]; then
            nixInfoLog "symlink $path points outside the Nix store; ignoring";
            continue;
        fi;
        if [[ $path == "$symlinkTarget" ]]; then
            nixErrorLog "the symlink $path is reflexive";
            numReflexiveSymlinks+=1;
        else
            if [[ ! -e $symlinkTarget ]]; then
                nixErrorLog "the symlink $path points to a missing target: $symlinkTarget";
                numDanglingSymlinks+=1;
            else
                nixDebugLog "the symlink $path is irreflexive and points to a target which exists";
            fi;
        fi;
    done < <(find "$output" -type l -print0);
    if ((numDanglingSymlinks > 0 || numReflexiveSymlinks > 0 || numUnreadableSymlinks > 0)); then
        nixErrorLog "found $numDanglingSymlinks dangling symlinks, $numReflexiveSymlinks reflexive symlinks and $numUnreadableSymlinks unreadable symlinks";
        exit 1;
    fi;
    return 0
}
noBrokenSymlinksInAllOutputs ()
{
 
    if [[ -z ${dontCheckForBrokenSymlinks-} ]]; then
        for output in $(getAllOutputNames);
        do
            noBrokenSymlinks "${!output}";
        done;
    fi
}
patchELF ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "shrinking RPATHs of ELF executables and libraries in $dir";
    local i;
    while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if ! isELF "$i"; then
            continue;
        fi;
        echo "shrinking $i";
        patchelf --shrink-rpath "$i" || true;
    done < <(find "$dir" -type f -print0)
}
patchPhase ()
{
 
    runHook prePatch;
    local -a patchesArray;
    concatTo patchesArray patches;
    for i in "${patchesArray[@]}";
    do
        echo "applying patch $i";
        local uncompress=cat;
        case "$i" in 
            *.gz)
                uncompress="gzip -d"
            ;;
            *.bz2)
                uncompress="bzip2 -d"
            ;;
            *.xz)
                uncompress="xz -d"
            ;;
            *.lzma)
                uncompress="lzma -d"
            ;;
        esac;
        local -a flagsArray;
        concatTo flagsArray patchFlags=-p1;
        $uncompress < "$i" 2>&1 | patch "${flagsArray[@]}";
    done;
    runHook postPatch
}
patchShebangs ()
{
 
    local pathName;
    local update=false;
    while [[ $# -gt 0 ]]; do
        case "$1" in 
            --host)
                pathName=HOST_PATH;
                shift
            ;;
            --build)
                pathName=PATH;
                shift
            ;;
            --update)
                update=true;
                shift
            ;;
            --)
                shift;
                break
            ;;
            -* | --*)
                echo "Unknown option $1 supplied to patchShebangs" 1>&2;
                return 1
            ;;
            *)
                break
            ;;
        esac;
    done;
    echo "patching script interpreter paths in $@";
    local f;
    local oldPath;
    local newPath;
    local arg0;
    local args;
    local oldInterpreterLine;
    local newInterpreterLine;
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied to patchShebangs" 1>&2;
        return 0;
    fi;
    local f;
    while IFS= read -r -d '' f; do
        isScript "$f" || continue;
        read -r oldInterpreterLine < "$f" || [ "$oldInterpreterLine" ];
        read -r oldPath arg0 args <<< "${oldInterpreterLine:2}";
        if [[ -z "${pathName:-}" ]]; then
            if [[ -n $strictDeps && $f == "$NIX_STORE"* ]]; then
                pathName=HOST_PATH;
            else
                pathName=PATH;
            fi;
        fi;
        if [[ "$oldPath" == *"/bin/env" ]]; then
            if [[ $arg0 == "-S" ]]; then
                arg0=${args%% *};
                [[ "$args" == *" "* ]] && args=${args#* } || args=;
                newPath="$(PATH="${!pathName}" type -P "env" || true)";
                args="-S $(PATH="${!pathName}" type -P "$arg0" || true) $args";
            else
                if [[ $arg0 == "-"* || $arg0 == *"="* ]]; then
                    echo "$f: unsupported interpreter directive \"$oldInterpreterLine\" (set dontPatchShebangs=1 and handle shebang patching yourself)" 1>&2;
                    exit 1;
                else
                    newPath="$(PATH="${!pathName}" type -P "$arg0" || true)";
                fi;
            fi;
        else
            if [[ -z $oldPath ]]; then
                oldPath="/bin/sh";
            fi;
            newPath="$(PATH="${!pathName}" type -P "$(basename "$oldPath")" || true)";
            args="$arg0 $args";
        fi;
        newInterpreterLine="$newPath $args";
        newInterpreterLine=${newInterpreterLine%${newInterpreterLine##*[![:space:]]}};
        if [[ -n "$oldPath" && ( "$update" == true || "${oldPath:0:${#NIX_STORE}}" != "$NIX_STORE" ) ]]; then
            if [[ -n "$newPath" && "$newPath" != "$oldPath" ]]; then
                echo "$f: interpreter directive changed from \"$oldInterpreterLine\" to \"$newInterpreterLine\"";
                escapedInterpreterLine=${newInterpreterLine//\\/\\\\};
                timestamp=$(stat --printf "%y" "$f");
                sed -i -e "1 s|.*|#\!$escapedInterpreterLine|" "$f";
                touch --date "$timestamp" "$f";
            fi;
        fi;
    done < <(find "$@" -type f -perm -0100 -print0)
}
patchShebangsAuto ()
{
 
    if [[ -z "${dontPatchShebangs-}" && -e "$prefix" ]]; then
        if [[ "$output" != out && "$output" = "$outputDev" ]]; then
            patchShebangs --build "$prefix";
        else
            patchShebangs --host "$prefix";
        fi;
    fi
}
prependToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if type=$(declare -p "$1" 2> /dev/null); then
        case "${type#* }" in 
            -A*)
                echo "prependToVar(): ERROR: trying to use prependToVar on an associative array." 1>&2;
                return 1
            ;;
            -a*)
                useArray=true
            ;;
            *)
                useArray=false
            ;;
        esac;
    fi;
    shift;
    if $useArray; then
        nameref=("$@" ${nameref+"${nameref[@]}"});
    else
        nameref="$* ${nameref-}";
    fi
}
printLines ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s\n' "$@"
}
printWords ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s ' "$@"
}
recordPropagatedDependencies ()
{
 
    declare -ra flatVars=(depsBuildBuildPropagated propagatedNativeBuildInputs depsBuildTargetPropagated depsHostHostPropagated propagatedBuildInputs depsTargetTargetPropagated);
    declare -ra flatFiles=("${propagatedBuildDepFiles[@]}" "${propagatedHostDepFiles[@]}" "${propagatedTargetDepFiles[@]}");
    local propagatedInputsIndex;
    for propagatedInputsIndex in "${!flatVars[@]}";
    do
        local propagatedInputsSlice="${flatVars[$propagatedInputsIndex]}[@]";
        local propagatedInputsFile="${flatFiles[$propagatedInputsIndex]}";
        [[ -n "${!propagatedInputsSlice}" ]] || continue;
        mkdir -p "${!outputDev}/nix-support";
        printWords ${!propagatedInputsSlice} > "${!outputDev}/nix-support/$propagatedInputsFile";
    done
}
runHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook;
    for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _logHook "$hookName" "$hook" "$@";
        _eval "$hook" "$@";
    done;
    return 0
}
runOneHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook ret=1;
    for hook in "_callImplicitHook 1 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _logHook "$hookName" "$hook" "$@";
        if _eval "$hook" "$@"; then
            ret=0;
            break;
        fi;
    done;
    return "$ret"
}
runPhase ()
{
 
    local curPhase="$*";
    if [[ "$curPhase" = unpackPhase && -n "${dontUnpack:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = patchPhase && -n "${dontPatch:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = configurePhase && -n "${dontConfigure:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = buildPhase && -n "${dontBuild:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = checkPhase && -z "${doCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installPhase && -n "${dontInstall:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = fixupPhase && -n "${dontFixup:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installCheckPhase && -z "${doInstallCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = distPhase && -z "${doDist:-}" ]]; then
        return;
    fi;
    showPhaseHeader "$curPhase";
    dumpVars;
    local startTime endTime;
    startTime=$(date +"%s");
    eval "${!curPhase:-$curPhase}";
    endTime=$(date +"%s");
    showPhaseFooter "$curPhase" "$startTime" "$endTime";
    if [ "$curPhase" = unpackPhase ]; then
        [ -n "${sourceRoot:-}" ] && chmod +x -- "${sourceRoot}";
        cd -- "${sourceRoot:-.}";
    fi
}
showPhaseFooter ()
{
 
    local phase="$1";
    local startTime="$2";
    local endTime="$3";
    local delta=$(( endTime - startTime ));
    (( delta < 30 )) && return;
    local H=$((delta/3600));
    local M=$((delta%3600/60));
    local S=$((delta%60));
    echo -n "$phase completed in ";
    (( H > 0 )) && echo -n "$H hours ";
    (( M > 0 )) && echo -n "$M minutes ";
    echo "$S seconds"
}
showPhaseHeader ()
{
 
    local phase="$1";
    echo "Running phase: $phase";
    if [[ -z ${NIX_LOG_FD-} ]]; then
        return;
    fi;
    printf "@nix { \"action\": \"setPhase\", \"phase\": \"%s\" }\n" "$phase" >&"$NIX_LOG_FD"
}
stripDirs ()
{
 
    local cmd="$1";
    local ranlibCmd="$2";
    local paths="$3";
    local stripFlags="$4";
    local excludeFlags=();
    local pathsNew=;
    [ -z "$cmd" ] && echo "stripDirs: Strip command is empty" 1>&2 && exit 1;
    [ -z "$ranlibCmd" ] && echo "stripDirs: Ranlib command is empty" 1>&2 && exit 1;
    local pattern;
    if [ -n "${stripExclude:-}" ]; then
        for pattern in "${stripExclude[@]}";
        do
            excludeFlags+=(-a '!' '(' -name "$pattern" -o -wholename "$prefix/$pattern" ')');
        done;
    fi;
    local p;
    for p in ${paths};
    do
        if [ -e "$prefix/$p" ]; then
            pathsNew="${pathsNew} $prefix/$p";
        fi;
    done;
    paths=${pathsNew};
    if [ -n "${paths}" ]; then
        echo "stripping (with command $cmd and flags $stripFlags) in $paths";
        local striperr;
        striperr="$(mktemp --tmpdir="$TMPDIR" 'striperr.XXXXXX')";
        find $paths -type f "${excludeFlags[@]}" -a '!' -path "$prefix/lib/debug/*" -printf '%D-%i,%p\0' | sort -t, -k1,1 -u -z | cut -d, -f2- -z | xargs -r -0 -n1 -P "$NIX_BUILD_CORES" -- $cmd $stripFlags 2> "$striperr" || exit_code=$?;
        [[ "$exit_code" = 123 || -z "$exit_code" ]] || ( cat "$striperr" 1>&2 && exit 1 );
        rm "$striperr";
        find $paths -name '*.a' -type f -exec $ranlibCmd '{}' \; 2> /dev/null;
    fi
}
stripHash ()
{
 
    local strippedName casematchOpt=0;
    strippedName="$(basename -- "$1")";
    shopt -q nocasematch && casematchOpt=1;
    shopt -u nocasematch;
    if [[ "$strippedName" =~ ^[a-z0-9]{32}- ]]; then
        echo "${strippedName:33}";
    else
        echo "$strippedName";
    fi;
    if (( casematchOpt )); then
        shopt -s nocasematch;
    fi
}
substitute ()
{
 
    local input="$1";
    local output="$2";
    shift 2;
    if [ ! -f "$input" ]; then
        echo "substitute(): ERROR: file '$input' does not exist" 1>&2;
        return 1;
    fi;
    local content;
    consumeEntire content < "$input";
    if [ -e "$output" ]; then
        chmod +w "$output";
    fi;
    substituteStream content "file '$input'" "$@" > "$output"
}
substituteAll ()
{
 
    local input="$1";
    local output="$2";
    local -a args=();
    _allFlags;
    substitute "$input" "$output" "${args[@]}"
}
substituteAllInPlace ()
{
 
    local fileName="$1";
    shift;
    substituteAll "$fileName" "$fileName" "$@"
}
substituteAllStream ()
{
 
    local -a args=();
    _allFlags;
    substituteStream "$1" "$2" "${args[@]}"
}
substituteInPlace ()
{
 
    local -a fileNames=();
    for arg in "$@";
    do
        if [[ "$arg" = "--"* ]]; then
            break;
        fi;
        fileNames+=("$arg");
        shift;
    done;
    if ! [[ "${#fileNames[@]}" -gt 0 ]]; then
        echo "substituteInPlace called without any files to operate on (files must come before options!)" 1>&2;
        return 1;
    fi;
    for file in "${fileNames[@]}";
    do
        substitute "$file" "$file" "$@";
    done
}
substituteStream ()
{
 
    local var=$1;
    local description=$2;
    shift 2;
    while (( "$#" )); do
        local replace_mode="$1";
        case "$1" in 
            --replace)
                if ! "$_substituteStream_has_warned_replace_deprecation"; then
                    echo "substituteStream() in derivation $name: WARNING: '--replace' is deprecated, use --replace-{fail,warn,quiet}. ($description)" 1>&2;
                    _substituteStream_has_warned_replace_deprecation=true;
                fi;
                replace_mode='--replace-warn'
            ;&
            --replace-quiet | --replace-warn | --replace-fail)
                pattern="$2";
                replacement="$3";
                shift 3;
                if ! [[ "${!var}" == *"$pattern"* ]]; then
                    if [ "$replace_mode" == --replace-warn ]; then
                        printf "substituteStream() in derivation $name: WARNING: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                    else
                        if [ "$replace_mode" == --replace-fail ]; then
                            printf "substituteStream() in derivation $name: ERROR: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                            return 1;
                        fi;
                    fi;
                fi;
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var)
                local varName="$2";
                shift 2;
                if ! [[ "$varName" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "substituteStream() in derivation $name: ERROR: substitution variables must be valid Bash names, \"$varName\" isn't." 1>&2;
                    return 1;
                fi;
                if [ -z ${!varName+x} ]; then
                    echo "substituteStream() in derivation $name: ERROR: variable \$$varName is unset" 1>&2;
                    return 1;
                fi;
                pattern="@$varName@";
                replacement="${!varName}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var-by)
                pattern="@$2@";
                replacement="$3";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                shift 3
            ;;
            *)
                echo "substituteStream() in derivation $name: ERROR: Invalid command line argument: $1" 1>&2;
                return 1
            ;;
        esac;
    done;
    printf "%s" "${!var}"
}
unpackFile ()
{
 
    curSrc="$1";
    echo "unpacking source archive $curSrc";
    if ! runOneHook unpackCmd "$curSrc"; then
        echo "do not know how to unpack source archive $curSrc";
        exit 1;
    fi
}
unpackPhase ()
{
 
    runHook preUnpack;
    if [ -z "${srcs:-}" ]; then
        if [ -z "${src:-}" ]; then
            echo 'variable $src or $srcs should point to the source';
            exit 1;
        fi;
        srcs="$src";
    fi;
    local -a srcsArray;
    concatTo srcsArray srcs;
    local dirsBefore="";
    for i in *;
    do
        if [ -d "$i" ]; then
            dirsBefore="$dirsBefore $i ";
        fi;
    done;
    for i in "${srcsArray[@]}";
    do
        unpackFile "$i";
    done;
    : "${sourceRoot=}";
    if [ -n "${setSourceRoot:-}" ]; then
        runOneHook setSourceRoot;
    else
        if [ -z "$sourceRoot" ]; then
            for i in *;
            do
                if [ -d "$i" ]; then
                    case $dirsBefore in 
                        *\ $i\ *)

                        ;;
                        *)
                            if [ -n "$sourceRoot" ]; then
                                echo "unpacker produced multiple directories";
                                exit 1;
                            fi;
                            sourceRoot="$i"
                        ;;
                    esac;
                fi;
            done;
        fi;
    fi;
    if [ -z "$sourceRoot" ]; then
        echo "unpacker appears to have produced no directories";
        exit 1;
    fi;
    echo "source root is $sourceRoot";
    if [ "${dontMakeSourcesWritable:-0}" != 1 ]; then
        chmod -R u+w -- "$sourceRoot";
    fi;
    runHook postUnpack
}
updateAutotoolsGnuConfigScriptsPhase ()
{
 
    if [ -n "${dontUpdateAutotoolsGnuConfigScripts-}" ]; then
        return;
    fi;
    for script in config.sub config.guess;
    do
        for f in $(find . -type f -name "$script");
        do
            echo "Updating Autotools / GNU config script to a newer upstream version: $f";
            cp -f "/nix/store/dhiwbm7kzlc01yk99900g8lj2g7faxyn-gnu-config-2024-01-01/$script" "$f";
        done;
    done
}
updateSourceDateEpoch ()
{
 
    local path="$1";
    [[ $path == -* ]] && path="./$path";
    local -a res=($(find "$path" -type f -not -newer "$NIX_BUILD_TOP/.." -printf '%T@ "%p"\0' | sort -n --zero-terminated | tail -n1 --zero-terminated | head -c -1));
    local time="${res[0]//\.[0-9]*/}";
    local newestFile="${res[1]}";
    if [ "${time:-0}" -gt "$SOURCE_DATE_EPOCH" ]; then
        echo "setting SOURCE_DATE_EPOCH to timestamp $time of file $newestFile";
        export SOURCE_DATE_EPOCH="$time";
        local now="$(date +%s)";
        if [ "$time" -gt $((now - 60)) ]; then
            echo "warning: file $newestFile may be generated; SOURCE_DATE_EPOCH may be non-deterministic";
        fi;
    fi
}
PATH="$PATH${nix_saved_PATH:+:$nix_saved_PATH}"
XDG_DATA_DIRS="$XDG_DATA_DIRS${nix_saved_XDG_DATA_DIRS:+:$nix_saved_XDG_DATA_DIRS}"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "${shellHook:-}"
